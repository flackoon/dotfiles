"Keybord remaps
nnoremap <down> <Nop>
nnoremap <up> <Nop>
nnoremap <C-u> <C-u>zz
nnoremap <C-d> <C-d>zz

" Searching
nnoremap <leader>o :Files<cr>
nnoremap <leader>f :GFiles --exclude-standard<cr>
nnoremap <leader>s :CtrlSF<SPACE>
" Typing
inoremap <C-u> <ESC>ui
inoremap <C-r> <ESC><C-r>i
inoremap <C-d> <ESC>Di
inoremap <C-b> <ESC>dBi
inoremap <C-w> <C-\><C-o>dB


" keyboard shortcuts
noremap  <C-h> <C-w>h
noremap  <C-j> <C-w>j
noremap  <C-k> <C-w>k
noremap  <C-l> <C-w>l
" Folding
noremap  <leader>. za
noremap  <leader>, zf
noremap  <leader>- zd

" previous tab
nnoremap gp gT
nnoremap gn gt
nnoremap go :tabnew<SPACE>
nnoremap <leader>bo :e<SPACE>
nnoremap <silent> <leader>bc :BD!<CR>
nnoremap <leader>bq :q!<CR>
nnoremap <leader>bs :w<CR>
nnoremap <leader>n :bn<CR>
nnoremap <leader>p :bp<CR>
nnoremap <leader>bl <C-O>
nnoremap <leader>qa :%bd\|e#\|bn\|BD!<CR>
nnoremap <F5> :buffers<CR>:buffer<Space>
nnoremap <F7> :qa<CR>

inoremap <C-j> <Esc>:m .+1<CR>==gi
inoremap <C-k> <Esc>:m .-2<CR>==gi
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv


nmap     <silent>  <leader>gm  :Gvdiffsplit!<CR>
nmap     <silent>  <leader>dg2 :diffget //2<CR>
nmap     <silent>  <leader>dg3 :diffget //3<CR>
nmap     <silent>  <leader>dp1 :diffput //1<CR>

map      <silent>  <Leader>ra  :call RunCurrentSpecFile()<CR>
map      <silent>  <Leader>rn  :call RunNearestSpec()<CR>
map      <silent>  <Leader>rl  :call RunLastSpec()<CR>

map      <silent>  <leader>1  :NERDTreeFind<CR>zz
map      <silent>  <leader>e  :NERDTreeToggle<CR>
map      <silent>  <leader>hu :GitGutterUndoHunk<CR>
map      <silent>  <leader>hs :GitGutterStageHunk<CR>
map      <silent>  <leader>gb :Git blame<CR>
map      <silent>  <leader>gd :vertical Gdiffsplit<CR>
map      <silent>  # ^
map      <silent>  <leader>* :nohlsearch<CR>
noremap  <silent>  <leader>/ :Commentary<cr>
nnoremap <silent>  <leader>9 :!tig %<CR>
vnoremap <silent>  <leader>8 :exec 'CtrlSF "'.escape(@*, '\\/.*$^~[]').'"'<CR>
nnoremap <silent>  <leader>7 :CtrlSF <C-R>=expand("<cword>")<CR><CR>
noremap  <silent>  <Leader>cfp :let @+ = expand("%:t") \| echo 'cb> ' . @+<CR>
noremap  <silent>  <Leader>cffp :let @+ = expand("%:p") \| echo 'cb> ' . @+<CR>

nnoremap <silent>  <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent>  <C-j> :TmuxNavigateDown<cr>
nnoremap <silent>  <C-k> :TmuxNavigateUp<cr>
nnoremap <silent>  <C-l> :TmuxNavigateRight<cr>
nnoremap <silent>  <C-\> :TmuxNavigatePrevious<cr>

nnoremap <expr> <down> ScrollPopUp(1) ? '<esc>' : '<c-d>'
nnoremap <expr> <up> ScrollPopUp(0) ? '<esc>' : '<c-u>'

function FindCursorPopUp()
  let radius = get(a:000, 0, 2)
  let srow = screenrow()
  let scol = screencol()
  " it's necessary to test entire rect, as some popup might be quite small
  for r in range(srow - radius, srow + radius)
    for c in range(scol - radius, scol + radius)
      let winid = popup_locate(r, c)
      if winid != 0
        return winid
      endif
    endfor
  endfor

  return 0
endfunction

function ScrollPopUp(down)
  let winid = FindCursorPopUp()
  if winid == 0
    return 0
  endif

  let pp = popup_getpos(winid)
  call popup_setoptions( winid,
        \ {'firstline' : pp.firstline + ( a:down ? 1 : -1 ) } )

  return 1
endfunction
