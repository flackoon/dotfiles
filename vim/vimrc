set nocompatible                                             " don't bother with vi compatibility
syntax enable                                                " enable syntax highlighting

" configure Vundle
filetype on " without this vim emits a zero exit status, later, because of :ft off
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

source ~/.vimrc.bundles

call vundle#end()

" ensure ftdetect et al work by including this after the Vundle stuff
filetype plugin indent on

if (has('termguicolors'))
  set termguicolors
endif

set autoindent
set autoread                                                 " reload files when changed on disk, i.e. via `git checkout`
set backspace=2                                              " Fix broken backspace in some setups
set backupcopy=yes                                           " see :help crontab
set clipboard=unnamed

set encoding=utf-8
set fileencoding=utf-8
set termencoding=utf-8
set expandtab                                                 " expand tabs to spaces
set ignorecase                                                " case-insensitive search
"set incsearch                                                 " search as you type    CHECK
set hlsearch                                                  " highlight word under cursor
set laststatus=2                                              " always show status line
set list                                                      " show trailing whitespace
set showbreak=↪\
set listchars=tab:→\ ,eol:¬,nbsp:␣,trail:•,extends:⟩,precedes:⟨
set number                                                    " show line numbers
"set ruler                                                     " show where you are
set scrolloff=0                                               " show context above/below cursorline
set shiftwidth=2                                              " normal mode indentation commands use 2 spaces
set showcmd
set smartcase                                                 " case-sensitive search if any caps
set softtabstop=2                                             " insert mode tab and backspace use 2 spaces
set tabstop=2                                                 " width of a tab character§
set smarttab                                                  " insert blanks in front of a line
set smartindent                                               " smart autoindent on new line
set shiftround                                                " round indent to multiple of shiftwidth

set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmenu                                                  " show a navigable menu for tab completion
set wildmode=longest,list,full

set backspace=indent,eol,start                                " liberal backspacing in insert mode
fixdel

set nowrap                                                    " break by words
set showmatch                                                 " show matching brackets when hovering
set viminfo='25,\"50,n~/.vim/.viminfo
"set splitright
set undofile                                                  " save undo's after file closes
set undodir=$HOME/.vim/undo                                   " where to save undo histories
set undolevels=1000                                           " how many undos
set undoreload=10000                                          " number of lines to save for undo
set textwidth=120
set colorcolumn=120
set updatetime=100
"highlight ColorColumn ctermbg=gray "set to whatever you like
set cursorline                " highlight current line
set showtabline=2             " Always show tab bar at the top
set shell=zsh
" Turn folding off for real, hopefully
set foldmethod=manual
set nofoldenable
set complete-=t
set matchtime=1
set notimeout
set timeoutlen=0
" vim optimizations - people say this is making vim fast
set lazyredraw
set ttyfast
" Enable basic mouse behavior such as resizing buffers.
set mouse=a
if exists('$TMUX')  " Support resizing in tmux
  set ttymouse=xterm2
endif

"Keybord remaps
let mapleader = " "
nnoremap <SPACE> <Nop>
" Searching
nnoremap <leader>f :Files<cr>
nnoremap <leader>s :Ack<SPACE>
" Typing
inoremap <C-u> <ESC>ui
inoremap <C-r> <ESC><C-r>i
inoremap <C-d> <ESC>Di
inoremap <C-b> <ESC>dBi
inoremap <C-w> <ESC>dWi
inoremap <C-[> <ESC>diwi
" keyboard shortcuts
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
noremap <Tab> >>
noremap <S-Tab> <<
nnoremap <C-]> <ESC>yiw
inoremap <C-]> <ESC>yiwi
nnoremap <BS> i<BS><Esc>`^
noremap <Del> i<Del><Esc>^i

" previous tab
map gp gT
map gn gt
map go :tabnew<SPACE>
nnoremap <leader>bc :q!<CR>
nnoremap <leader>bs :w<CR>
nnoremap <leader>bqw :wq<CR>
nnoremap <leader>bn :bn<CR>
nnoremap <leader>bp :bp<CR>
nnoremap <leader>bo :e<SPACE>


nnoremap <C-Down> :m .+1<CR>==
nnoremap <C-Up> :m .-2<CR>==
inoremap <C-Down> <Esc>:m .+1<CR>==gi
inoremap <C-Up> <Esc>:m .-2<CR>==gi
vnoremap <C-Down> :m '>+1<CR>gv=gv
vnoremap <C-Up> :m '<-2<CR>gv=gv

map <leader>e :NERDTreeToggle<CR>
map <leader>hu :GitGutterUndoHunk<CR>
map <leader>hs :GitGutterStageHunk<CR>
map <leader>* :nohlsearch<CR>

" Use ag with Ack in Vim
if executable('rg')
  let g:ackprg = 'rg --vimgrep'
endif

" automatically rebalance windows on vim resize
"autocmd VimResized * :wincmd =" theme setup

" LSP and File Types Support
if has("autocmd")
  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on
  autocmd VimEnter * GitGutterEnable
  autocmd FileType text setlocal textwidth=80
  autocmd FileType markdown setlocal textwidth=100
  autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType javascript setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType sass setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType make setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
  autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
  autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
endif

let g:ruby_autocomplete_solargraph = '~/.rbenv/shims/solargraph'

" https://github.com/junegunn/fzf.vim
" Default fzf layout
" - down / up / left / right
let g:fzf_layout = { 'down': '0%', 'up': '~100%' }
let g:fzf_files_options = '--preview "(coderay {} || cat {}) 2> /dev/null | head -'.&lines.'"'
" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1
" [[B]Commits] Customize the options used by 'git log':
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'
" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R'
" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

let g:ale_fix_on_save = 1
let g:ale_completion_enabled = 1
"let g:ale_linters_explicit = 1
let g:ale_ruby_rubocop_executable = 'bundle exec rubocop'
let g:ale_ruby_rubocop_options = '--autocorrect'
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'ruby': ['rubocop'],
\}

let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'ruby': ['rubocop'],
\}


let g:material_theme_style = 'darker-community'
let g:material_terminal_italics = 1
"let g:sonokai_current_word = 'underline'
"let g:sonokai_diagnostic_line_highlight = 1
"let g:sonokai_diagnostic_text_highlight = 1

let g:airline_theme = 'powerlineish'
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'default'
let g:airline_powerline_fonts = 1

colorscheme material

" Vimdiff settings
if &diff                             " only for diff mode/vimdiff
  set diffopt=filler,context:1000000 " filler is default and inserts empty lines for sync
endif
