/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

"use strict";

var obsidian = require("obsidian");

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P
      ? value
      : new P(function (resolve) {
          resolve(value);
        });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

typeof SuppressedError === "function"
  ? SuppressedError
  : function (error, suppressed, message) {
      var e = new Error(message);
      return (e.name = "SuppressedError"), (e.error = error), (e.suppressed = suppressed), e;
    };

function wait(delay) {
  return __awaiter(this, void 0, void 0, function* () {
    return new Promise((resolve) => setTimeout(resolve, delay));
  });
}

const icons = {
  "highlightr-eraser": `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke="currentColor" stroke-width="0" stroke-linecap="round" stroke-linejoin="round"><path d="M2.586 15.408l4.299 4.299a.996.996 0 0 0 .707.293h12.001v-2h-6.958l7.222-7.222c.78-.779.78-2.049 0-2.828L14.906 3a2.003 2.003 0 0 0-2.828 0l-4.75 4.749l-4.754 4.843a2.007 2.007 0 0 0 .012 2.816zM13.492 4.414l4.95 4.95l-2.586 2.586L10.906 7l2.586-2.586zM8.749 9.156l.743-.742l4.95 4.95l-4.557 4.557a1.026 1.026 0 0 0-.069.079h-1.81l-4.005-4.007l4.748-4.837z" fill="currentColor"/></svg>`,
  "highlightr-pen": `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke="currentColor" stroke-width="0" stroke-linecap="round" stroke-linejoin="round"><path d="M20.707 5.826l-3.535-3.533a.999.999 0 0 0-1.408-.006L7.096 10.82a1.01 1.01 0 0 0-.273.488l-1.024 4.437L4 18h2.828l1.142-1.129l3.588-.828c.18-.042.345-.133.477-.262l8.667-8.535a1 1 0 0 0 .005-1.42zm-9.369 7.833l-2.121-2.12l7.243-7.131l2.12 2.12l-7.242 7.131zM4 20h16v2H4z" fill="currentColor"/></svg>`,
  "highlightr-add": `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke="white" stroke-width="0" stroke-linecap="round" stroke-linejoin="round"><path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4z" fill="white"/><path d="M12 2C6.486 2 2 6.486 2 12s4.486 10 10 10s10-4.486 10-10S17.514 2 12 2zm0 18c-4.411 0-8-3.589-8-8s3.589-8 8-8s8 3.589 8 8s-3.589 8-8 8z" fill="white"/></svg>`,
  "highlightr-save": `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke="white" stroke-width="0" stroke-linecap="round" stroke-linejoin="round"><path d="M5 21h14a2 2 0 0 0 2-2V8a1 1 0 0 0-.29-.71l-4-4A1 1 0 0 0 16 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2zm10-2H9v-5h6zM13 7h-2V5h2zM5 5h2v4h8V5h.59L19 8.41V19h-2v-5a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v5H5z" fill="white"/></svg>`,
  "highlightr-delete": `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke="white" stroke-width="0" stroke-linecap="round" stroke-linejoin="round"><path d="M5 20a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V8h2V6h-4V4a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v2H3v2h2zM9 4h6v2H9zM8 8h9v12H7V8z" fill="white"/><path d="M9 10h2v8H9zm4 0h2v8h-2z" fill="white"/></svg>`,
  "highlightr-copy": `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><defs><style>.cls-1{fill:white;opacity:0;}.cls-2{fill:white;}</style></defs><title>copy</title><g id="Layer_2" data-name="Layer 2"><g id="copy"><g id="copy-2" data-name="copy"><rect class="cls-1" width="24" height="24"/><path class="cls-2" d="M18,21H12a3,3,0,0,1-3-3V12a3,3,0,0,1,3-3h6a3,3,0,0,1,3,3v6A3,3,0,0,1,18,21ZM12,11a1,1,0,0,0-1,1v6a1,1,0,0,0,1,1h6a1,1,0,0,0,1-1V12a1,1,0,0,0-1-1Z"/><path class="cls-2" d="M9.73,15H5.67A2.68,2.68,0,0,1,3,12.33V5.67A2.68,2.68,0,0,1,5.67,3h6.66A2.68,2.68,0,0,1,15,5.67V9.4H13V5.67A.67.67,0,0,0,12.33,5H5.67A.67.67,0,0,0,5,5.67v6.66a.67.67,0,0,0,.67.67H9.73Z"/></g></g></g></svg>`,
};
function createHighlighterIcons(settings, plugin) {
  const highlighterIcons = {};
  for (const key of plugin.settings.highlighterOrder) {
    let highlighterpen = `highlightr-pen-${key}`.toLowerCase();
    highlighterIcons[
      highlighterpen
    ] = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke="currentColor" stroke-width="0" stroke-linecap="round" stroke-linejoin="round"><path d="M20.707 5.826l-3.535-3.533a.999.999 0 0 0-1.408-.006L7.096 10.82a1.01 1.01 0 0 0-.273.488l-1.024 4.437L4 18h2.828l1.142-1.129l3.588-.828c.18-.042.345-.133.477-.262l8.667-8.535a1 1 0 0 0 .005-1.42zm-9.369 7.833l-2.121-2.12l7.243-7.131l2.12 2.12l-7.242 7.131zM4 20h16v2H4z" fill="${settings.highlighters[key]}"/></svg>`;
  }
  Object.keys(highlighterIcons).forEach((key) => {
    obsidian.addIcon(key, highlighterIcons[key]);
  });
  return highlighterIcons;
}
function addIcons() {
  Object.keys(icons).forEach((key) => {
    obsidian.addIcon(key, icons[key]);
  });
}

function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}

function createCommonjsModule(fn) {
  var module = { exports: {} };
  return fn(module, module.exports), module.exports;
}

/*! Pickr 1.9.0 MIT | https://github.com/Simonwep/pickr */

var pickr_min = createCommonjsModule(function (module, exports) {
  !(function (t, e) {
    module.exports = e();
  })(self, () =>
    (() => {
      var t = {
          d: (e, o) => {
            for (var n in o) t.o(o, n) && !t.o(e, n) && Object.defineProperty(e, n, { enumerable: !0, get: o[n] });
          },
          o: (t, e) => Object.prototype.hasOwnProperty.call(t, e),
          r: (t) => {
            "undefined" != typeof Symbol &&
              Symbol.toStringTag &&
              Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }),
              Object.defineProperty(t, "__esModule", { value: !0 });
          },
        },
        e = {};
      t.d(e, { default: () => E });
      var o = {};
      function n(t, e, o, n, i = {}) {
        e instanceof HTMLCollection || e instanceof NodeList ? (e = Array.from(e)) : Array.isArray(e) || (e = [e]),
          Array.isArray(o) || (o = [o]);
        for (const s of e) for (const e of o) s[t](e, n, { capture: !1, ...i });
        return Array.prototype.slice.call(arguments, 1);
      }
      t.r(o),
        t.d(o, {
          adjustableInputNumbers: () => p,
          createElementFromString: () => r,
          createFromTemplate: () => a,
          eventPath: () => l,
          off: () => s,
          on: () => i,
          resolveElement: () => c,
        });
      const i = n.bind(null, "addEventListener"),
        s = n.bind(null, "removeEventListener");
      function r(t) {
        const e = document.createElement("div");
        return (e.innerHTML = t.trim()), e.firstElementChild;
      }
      function a(t) {
        const e = (t, e) => {
            const o = t.getAttribute(e);
            return t.removeAttribute(e), o;
          },
          o = (t, n = {}) => {
            const i = e(t, ":obj"),
              s = e(t, ":ref"),
              r = i ? (n[i] = {}) : n;
            s && (n[s] = t);
            for (const n of Array.from(t.children)) {
              const t = e(n, ":arr"),
                i = o(n, t ? {} : r);
              t && (r[t] || (r[t] = [])).push(Object.keys(i).length ? i : n);
            }
            return n;
          };
        return o(r(t));
      }
      function l(t) {
        let e = t.path || (t.composedPath && t.composedPath());
        if (e) return e;
        let o = t.target.parentElement;
        for (e = [t.target, o]; (o = o.parentElement); ) e.push(o);
        return e.push(document, window), e;
      }
      function c(t) {
        return t instanceof Element
          ? t
          : "string" == typeof t
          ? t
              .split(/>>/g)
              .reduce((t, e, o, n) => ((t = t.querySelector(e)), o < n.length - 1 ? t.shadowRoot : t), document)
          : null;
      }
      function p(t, e = (t) => t) {
        function o(o) {
          const n = [0.001, 0.01, 0.1][Number(o.shiftKey || 2 * o.ctrlKey)] * (o.deltaY < 0 ? 1 : -1);
          let i = 0,
            s = t.selectionStart;
          (t.value = t.value.replace(/[\d.]+/g, (t, o) =>
            o <= s && o + t.length >= s ? ((s = o), e(Number(t), n, i)) : (i++, t)
          )),
            t.focus(),
            t.setSelectionRange(s, s),
            o.preventDefault(),
            t.dispatchEvent(new Event("input"));
        }
        i(t, "focus", () => i(window, "wheel", o, { passive: !1 })), i(t, "blur", () => s(window, "wheel", o));
      }
      const { min: u, max: h, floor: d, round: m } = Math;
      function f(t, e, o) {
        (e /= 100), (o /= 100);
        const n = d((t = (t / 360) * 6)),
          i = t - n,
          s = o * (1 - e),
          r = o * (1 - i * e),
          a = o * (1 - (1 - i) * e),
          l = n % 6;
        return [255 * [o, r, s, s, a, o][l], 255 * [a, o, o, r, s, s][l], 255 * [s, s, a, o, o, r][l]];
      }
      function v(t, e, o) {
        const n = ((2 - (e /= 100)) * (o /= 100)) / 2;
        return (
          0 !== n && (e = 1 === n ? 0 : n < 0.5 ? (e * o) / (2 * n) : (e * o) / (2 - 2 * n)), [t, 100 * e, 100 * n]
        );
      }
      function b(t, e, o) {
        const n = u((t /= 255), (e /= 255), (o /= 255)),
          i = h(t, e, o),
          s = i - n;
        let r, a;
        if (0 === s) r = a = 0;
        else {
          a = s / i;
          const n = ((i - t) / 6 + s / 2) / s,
            l = ((i - e) / 6 + s / 2) / s,
            c = ((i - o) / 6 + s / 2) / s;
          t === i ? (r = c - l) : e === i ? (r = 1 / 3 + n - c) : o === i && (r = 2 / 3 + l - n),
            r < 0 ? (r += 1) : r > 1 && (r -= 1);
        }
        return [360 * r, 100 * a, 100 * i];
      }
      function y(t, e, o, n) {
        (e /= 100), (o /= 100);
        return [
          ...b(
            255 * (1 - u(1, (t /= 100) * (1 - (n /= 100)) + n)),
            255 * (1 - u(1, e * (1 - n) + n)),
            255 * (1 - u(1, o * (1 - n) + n))
          ),
        ];
      }
      function g(t, e, o) {
        e /= 100;
        const n = ((2 * (e *= (o /= 100) < 0.5 ? o : 1 - o)) / (o + e)) * 100,
          i = 100 * (o + e);
        return [t, isNaN(n) ? 0 : n, i];
      }
      function _(t) {
        return b(...t.match(/.{2}/g).map((t) => parseInt(t, 16)));
      }
      function w(t) {
        t = t.match(/^[a-zA-Z]+$/)
          ? (function (t) {
              if ("black" === t.toLowerCase()) return "#000";
              const e = document.createElement("canvas").getContext("2d");
              return (e.fillStyle = t), "#000" === e.fillStyle ? null : e.fillStyle;
            })(t)
          : t;
        const e = {
            cmyk: /^cmyk\D+([\d.]+)\D+([\d.]+)\D+([\d.]+)\D+([\d.]+)/i,
            rgba: /^rgba?\D+([\d.]+)(%?)\D+([\d.]+)(%?)\D+([\d.]+)(%?)\D*?(([\d.]+)(%?)|$)/i,
            hsla: /^hsla?\D+([\d.]+)\D+([\d.]+)\D+([\d.]+)\D*?(([\d.]+)(%?)|$)/i,
            hsva: /^hsva?\D+([\d.]+)\D+([\d.]+)\D+([\d.]+)\D*?(([\d.]+)(%?)|$)/i,
            hexa: /^#?(([\dA-Fa-f]{3,4})|([\dA-Fa-f]{6})|([\dA-Fa-f]{8}))$/i,
          },
          o = (t) => t.map((t) => (/^(|\d+)\.\d+|\d+$/.test(t) ? Number(t) : void 0));
        let n;
        t: for (const i in e)
          if ((n = e[i].exec(t)))
            switch (i) {
              case "cmyk": {
                const [, t, e, s, r] = o(n);
                if (t > 100 || e > 100 || s > 100 || r > 100) break t;
                return { values: y(t, e, s, r), type: i };
              }
              case "rgba": {
                let [, t, , e, , s, , , r] = o(n);
                if (
                  ((t = "%" === n[2] ? (t / 100) * 255 : t),
                  (e = "%" === n[4] ? (e / 100) * 255 : e),
                  (s = "%" === n[6] ? (s / 100) * 255 : s),
                  (r = "%" === n[9] ? r / 100 : r),
                  t > 255 || e > 255 || s > 255 || r < 0 || r > 1)
                )
                  break t;
                return { values: [...b(t, e, s), r], a: r, type: i };
              }
              case "hexa": {
                let [, t] = n;
                (4 !== t.length && 3 !== t.length) ||
                  (t = t
                    .split("")
                    .map((t) => t + t)
                    .join(""));
                const e = t.substring(0, 6);
                let o = t.substring(6);
                return (o = o ? parseInt(o, 16) / 255 : void 0), { values: [..._(e), o], a: o, type: i };
              }
              case "hsla": {
                let [, t, e, s, , r] = o(n);
                if (((r = "%" === n[6] ? r / 100 : r), t > 360 || e > 100 || s > 100 || r < 0 || r > 1)) break t;
                return { values: [...g(t, e, s), r], a: r, type: i };
              }
              case "hsva": {
                let [, t, e, s, , r] = o(n);
                if (((r = "%" === n[6] ? r / 100 : r), t > 360 || e > 100 || s > 100 || r < 0 || r > 1)) break t;
                return { values: [t, e, s, r], a: r, type: i };
              }
            }
        return { values: null, type: null };
      }
      function A(t = 0, e = 0, o = 0, n = 1) {
        const i =
            (t, e) =>
            (o = -1) =>
              e(~o ? t.map((t) => Number(t.toFixed(o))) : t),
          s = {
            h: t,
            s: e,
            v: o,
            a: n,
            toHSVA() {
              const t = [s.h, s.s, s.v, s.a];
              return (t.toString = i(t, (t) => `hsva(${t[0]}, ${t[1]}%, ${t[2]}%, ${s.a})`)), t;
            },
            toHSLA() {
              const t = [...v(s.h, s.s, s.v), s.a];
              return (t.toString = i(t, (t) => `hsla(${t[0]}, ${t[1]}%, ${t[2]}%, ${s.a})`)), t;
            },
            toRGBA() {
              const t = [...f(s.h, s.s, s.v), s.a];
              return (t.toString = i(t, (t) => `rgba(${t[0]}, ${t[1]}, ${t[2]}, ${s.a})`)), t;
            },
            toCMYK() {
              const t = (function (t, e, o) {
                const n = f(t, e, o),
                  i = n[0] / 255,
                  s = n[1] / 255,
                  r = n[2] / 255,
                  a = u(1 - i, 1 - s, 1 - r);
                return [
                  100 * (1 === a ? 0 : (1 - i - a) / (1 - a)),
                  100 * (1 === a ? 0 : (1 - s - a) / (1 - a)),
                  100 * (1 === a ? 0 : (1 - r - a) / (1 - a)),
                  100 * a,
                ];
              })(s.h, s.s, s.v);
              return (t.toString = i(t, (t) => `cmyk(${t[0]}%, ${t[1]}%, ${t[2]}%, ${t[3]}%)`)), t;
            },
            toHEXA() {
              const t = (function (t, e, o) {
                  return f(t, e, o).map((t) => m(t).toString(16).padStart(2, "0"));
                })(s.h, s.s, s.v),
                e =
                  s.a >= 1
                    ? ""
                    : Number((255 * s.a).toFixed(0))
                        .toString(16)
                        .toUpperCase()
                        .padStart(2, "0");
              return e && t.push(e), (t.toString = () => `#${t.join("").toUpperCase()}`), t;
            },
            clone: () => A(s.h, s.s, s.v, s.a),
          };
        return s;
      }
      const $ = (t) => Math.max(Math.min(t, 1), 0);
      function C(t) {
        const e = {
            options: Object.assign({ lock: null, onchange: () => 0, onstop: () => 0 }, t),
            _keyboard(t) {
              const { options: o } = e,
                { type: n, key: i } = t;
              if (document.activeElement === o.wrapper) {
                const { lock: o } = e.options,
                  s = "ArrowUp" === i,
                  r = "ArrowRight" === i,
                  a = "ArrowDown" === i,
                  l = "ArrowLeft" === i;
                if ("keydown" === n && (s || r || a || l)) {
                  let n = 0,
                    i = 0;
                  "v" === o
                    ? (n = s || r ? 1 : -1)
                    : "h" === o
                    ? (n = s || r ? -1 : 1)
                    : ((i = s ? -1 : a ? 1 : 0), (n = l ? -1 : r ? 1 : 0)),
                    e.update($(e.cache.x + 0.01 * n), $(e.cache.y + 0.01 * i)),
                    t.preventDefault();
                } else i.startsWith("Arrow") && (e.options.onstop(), t.preventDefault());
              }
            },
            _tapstart(t) {
              i(document, ["mouseup", "touchend", "touchcancel"], e._tapstop),
                i(document, ["mousemove", "touchmove"], e._tapmove),
                t.cancelable && t.preventDefault(),
                e._tapmove(t);
            },
            _tapmove(t) {
              const { options: o, cache: n } = e,
                { lock: i, element: s, wrapper: r } = o,
                a = r.getBoundingClientRect();
              let l = 0,
                c = 0;
              if (t) {
                const e = t && t.touches && t.touches[0];
                (l = t ? (e || t).clientX : 0),
                  (c = t ? (e || t).clientY : 0),
                  l < a.left ? (l = a.left) : l > a.left + a.width && (l = a.left + a.width),
                  c < a.top ? (c = a.top) : c > a.top + a.height && (c = a.top + a.height),
                  (l -= a.left),
                  (c -= a.top);
              } else n && ((l = n.x * a.width), (c = n.y * a.height));
              "h" !== i && (s.style.left = `calc(${(l / a.width) * 100}% - ${s.offsetWidth / 2}px)`),
                "v" !== i && (s.style.top = `calc(${(c / a.height) * 100}% - ${s.offsetHeight / 2}px)`),
                (e.cache = { x: l / a.width, y: c / a.height });
              const p = $(l / a.width),
                u = $(c / a.height);
              switch (i) {
                case "v":
                  return o.onchange(p);
                case "h":
                  return o.onchange(u);
                default:
                  return o.onchange(p, u);
              }
            },
            _tapstop() {
              e.options.onstop(),
                s(document, ["mouseup", "touchend", "touchcancel"], e._tapstop),
                s(document, ["mousemove", "touchmove"], e._tapmove);
            },
            trigger() {
              e._tapmove();
            },
            update(t = 0, o = 0) {
              const { left: n, top: i, width: s, height: r } = e.options.wrapper.getBoundingClientRect();
              "h" === e.options.lock && (o = t), e._tapmove({ clientX: n + s * t, clientY: i + r * o });
            },
            destroy() {
              const { options: t, _tapstart: o, _keyboard: n } = e;
              s(document, ["keydown", "keyup"], n),
                s([t.wrapper, t.element], "mousedown", o),
                s([t.wrapper, t.element], "touchstart", o, { passive: !1 });
            },
          },
          { options: o, _tapstart: n, _keyboard: r } = e;
        return (
          i([o.wrapper, o.element], "mousedown", n),
          i([o.wrapper, o.element], "touchstart", n, { passive: !1 }),
          i(document, ["keydown", "keyup"], r),
          e
        );
      }
      function k(t = {}) {
        t = Object.assign({ onchange: () => 0, className: "", elements: [] }, t);
        const e = i(t.elements, "click", (e) => {
          t.elements.forEach((o) => o.classList[e.target === o ? "add" : "remove"](t.className)),
            t.onchange(e),
            e.stopPropagation();
        });
        return { destroy: () => s(...e) };
      }
      const S = {
          variantFlipOrder: { start: "sme", middle: "mse", end: "ems" },
          positionFlipOrder: { top: "tbrl", right: "rltb", bottom: "btrl", left: "lrbt" },
          position: "bottom",
          margin: 8,
          padding: 0,
        },
        O = (t, e, o) => {
          const n = "object" != typeof t || t instanceof HTMLElement ? { reference: t, popper: e, ...o } : t;
          return {
            update(t = n) {
              const { reference: e, popper: o } = Object.assign(n, t);
              if (!o || !e) throw new Error("Popper- or reference-element missing.");
              return ((t, e, o) => {
                const {
                    container: n,
                    arrow: i,
                    margin: s,
                    padding: r,
                    position: a,
                    variantFlipOrder: l,
                    positionFlipOrder: c,
                  } = { container: document.documentElement.getBoundingClientRect(), ...S, ...o },
                  { left: p, top: u } = e.style;
                (e.style.left = "0"), (e.style.top = "0");
                const h = t.getBoundingClientRect(),
                  d = e.getBoundingClientRect(),
                  m = { t: h.top - d.height - s, b: h.bottom + s, r: h.right + s, l: h.left - d.width - s },
                  f = {
                    vs: h.left,
                    vm: h.left + h.width / 2 - d.width / 2,
                    ve: h.left + h.width - d.width,
                    hs: h.top,
                    hm: h.bottom - h.height / 2 - d.height / 2,
                    he: h.bottom - d.height,
                  },
                  [v, b = "middle"] = a.split("-"),
                  y = c[v],
                  g = l[b],
                  { top: _, left: w, bottom: A, right: $ } = n;
                for (const t of y) {
                  const o = "t" === t || "b" === t;
                  let n = m[t];
                  const [s, a] = o ? ["top", "left"] : ["left", "top"],
                    [l, c] = o ? [d.height, d.width] : [d.width, d.height],
                    [p, u] = o ? [A, $] : [$, A],
                    [v, b] = o ? [_, w] : [w, _];
                  if (!(n < v || n + l + r > p))
                    for (const p of g) {
                      let m = f[(o ? "v" : "h") + p];
                      if (!(m < b || m + c + r > u)) {
                        if (((m -= d[a]), (n -= d[s]), (e.style[a] = `${m}px`), (e.style[s] = `${n}px`), i)) {
                          const t = o ? h.width / 2 : h.height / 2,
                            e = 2 * t < c ? h[a] + t : m + c / 2;
                          n < h[s] && (n += l), (i.style[a] = `${e}px`), (i.style[s] = `${n}px`);
                        }
                        return t + p;
                      }
                    }
                }
                return (e.style.left = p), (e.style.top = u), null;
              })(e, o, n);
            },
          };
        };
      class E {
        static utils = o;
        static version = "1.9.0";
        static I18N_DEFAULTS = {
          "ui:dialog": "color picker dialog",
          "btn:toggle": "toggle color picker dialog",
          "btn:swatch": "color swatch",
          "btn:last-color": "use previous color",
          "btn:save": "Save",
          "btn:cancel": "Cancel",
          "btn:clear": "Clear",
          "aria:btn:save": "save and close",
          "aria:btn:cancel": "cancel and close",
          "aria:btn:clear": "clear and close",
          "aria:input": "color input field",
          "aria:palette": "color selection area",
          "aria:hue": "hue selection slider",
          "aria:opacity": "selection slider",
        };
        static DEFAULT_OPTIONS = {
          appClass: null,
          theme: "classic",
          useAsButton: !1,
          padding: 8,
          disabled: !1,
          comparison: !0,
          closeOnScroll: !1,
          outputPrecision: 0,
          lockOpacity: !1,
          autoReposition: !0,
          container: "body",
          components: { interaction: {} },
          i18n: {},
          swatches: null,
          inline: !1,
          sliders: null,
          default: "#42445a",
          defaultRepresentation: null,
          position: "bottom-middle",
          adjustableNumbers: !0,
          showAlways: !1,
          closeWithKey: "Escape",
        };
        _initializingActive = !0;
        _recalc = !0;
        _nanopop = null;
        _root = null;
        _color = A();
        _lastColor = A();
        _swatchColors = [];
        _setupAnimationFrame = null;
        _eventListener = {
          init: [],
          save: [],
          hide: [],
          show: [],
          clear: [],
          change: [],
          changestop: [],
          cancel: [],
          swatchselect: [],
        };
        constructor(t) {
          this.options = t = Object.assign({ ...E.DEFAULT_OPTIONS }, t);
          const { swatches: e, components: o, theme: n, sliders: i, lockOpacity: s, padding: r } = t;
          ["nano", "monolith"].includes(n) && !i && (t.sliders = "h"), o.interaction || (o.interaction = {});
          const { preview: a, opacity: l, hue: c, palette: p } = o;
          (o.opacity = !s && l),
            (o.palette = p || a || l || c),
            this._preBuild(),
            this._buildComponents(),
            this._bindEvents(),
            this._finalBuild(),
            e && e.length && e.forEach((t) => this.addSwatch(t));
          const { button: u, app: h } = this._root;
          (this._nanopop = O(u, h, { margin: r })),
            u.setAttribute("role", "button"),
            u.setAttribute("aria-label", this._t("btn:toggle"));
          const d = this;
          this._setupAnimationFrame = requestAnimationFrame(function e() {
            if (!h.offsetWidth) return requestAnimationFrame(e);
            d.setColor(t.default),
              d._rePositioningPicker(),
              t.defaultRepresentation &&
                ((d._representation = t.defaultRepresentation), d.setColorRepresentation(d._representation)),
              t.showAlways && d.show(),
              (d._initializingActive = !1),
              d._emit("init");
          });
        }
        static create = (t) => new E(t);
        _preBuild() {
          const { options: t } = this;
          for (const e of ["el", "container"]) t[e] = c(t[e]);
          (this._root = ((t) => {
            const { components: e, useAsButton: o, inline: n, appClass: i, theme: s, lockOpacity: r } = t.options,
              l = (t) => (t ? "" : 'style="display:none" hidden'),
              c = (e) => t._t(e),
              p = a(
                `\n      <div :ref="root" class="pickr">\n\n        ${
                  o ? "" : '<button type="button" :ref="button" class="pcr-button"></button>'
                }\n\n        <div :ref="app" class="pcr-app ${i || ""}" data-theme="${s}" ${
                  n ? 'style="position: unset"' : ""
                } aria-label="${c("ui:dialog")}" role="window">\n          <div class="pcr-selection" ${l(
                  e.palette
                )}>\n            <div :obj="preview" class="pcr-color-preview" ${l(
                  e.preview
                )}>\n              <button type="button" :ref="lastColor" class="pcr-last-color" aria-label="${c(
                  "btn:last-color"
                )}"></button>\n              <div :ref="currentColor" class="pcr-current-color"></div>\n            </div>\n\n            <div :obj="palette" class="pcr-color-palette">\n              <div :ref="picker" class="pcr-picker"></div>\n              <div :ref="palette" class="pcr-palette" tabindex="0" aria-label="${c(
                  "aria:palette"
                )}" role="listbox"></div>\n            </div>\n\n            <div :obj="hue" class="pcr-color-chooser" ${l(
                  e.hue
                )}>\n              <div :ref="picker" class="pcr-picker"></div>\n              <div :ref="slider" class="pcr-hue pcr-slider" tabindex="0" aria-label="${c(
                  "aria:hue"
                )}" role="slider"></div>\n            </div>\n\n            <div :obj="opacity" class="pcr-color-opacity" ${l(
                  e.opacity
                )}>\n              <div :ref="picker" class="pcr-picker"></div>\n              <div :ref="slider" class="pcr-opacity pcr-slider" tabindex="0" aria-label="${c(
                  "aria:opacity"
                )}" role="slider"></div>\n            </div>\n          </div>\n\n          <div class="pcr-swatches ${
                  e.palette ? "" : "pcr-last"
                }" :ref="swatches"></div>\n\n          <div :obj="interaction" class="pcr-interaction" ${l(
                  Object.keys(e.interaction).length
                )}>\n            <input :ref="result" class="pcr-result" type="text" spellcheck="false" ${l(
                  e.interaction.input
                )} aria-label="${c(
                  "aria:input"
                )}">\n\n            <input :arr="options" class="pcr-type" data-type="HEXA" value="${
                  r ? "HEX" : "HEXA"
                }" type="button" ${l(
                  e.interaction.hex
                )}>\n            <input :arr="options" class="pcr-type" data-type="RGBA" value="${
                  r ? "RGB" : "RGBA"
                }" type="button" ${l(
                  e.interaction.rgba
                )}>\n            <input :arr="options" class="pcr-type" data-type="HSLA" value="${
                  r ? "HSL" : "HSLA"
                }" type="button" ${l(
                  e.interaction.hsla
                )}>\n            <input :arr="options" class="pcr-type" data-type="HSVA" value="${
                  r ? "HSV" : "HSVA"
                }" type="button" ${l(
                  e.interaction.hsva
                )}>\n            <input :arr="options" class="pcr-type" data-type="CMYK" value="CMYK" type="button" ${l(
                  e.interaction.cmyk
                )}>\n\n            <input :ref="save" class="pcr-save" value="${c("btn:save")}" type="button" ${l(
                  e.interaction.save
                )} aria-label="${c("aria:btn:save")}">\n            <input :ref="cancel" class="pcr-cancel" value="${c(
                  "btn:cancel"
                )}" type="button" ${l(e.interaction.cancel)} aria-label="${c(
                  "aria:btn:cancel"
                )}">\n            <input :ref="clear" class="pcr-clear" value="${c("btn:clear")}" type="button" ${l(
                  e.interaction.clear
                )} aria-label="${c("aria:btn:clear")}">\n          </div>\n        </div>\n      </div>\n    `
              ),
              u = p.interaction;
            return (
              u.options.find((t) => !t.hidden && !t.classList.add("active")),
              (u.type = () => u.options.find((t) => t.classList.contains("active"))),
              p
            );
          })(this)),
            t.useAsButton && (this._root.button = t.el),
            t.container.appendChild(this._root.root);
        }
        _finalBuild() {
          const t = this.options,
            e = this._root;
          if ((t.container.removeChild(e.root), t.inline)) {
            const o = t.el.parentElement;
            t.el.nextSibling ? o.insertBefore(e.app, t.el.nextSibling) : o.appendChild(e.app);
          } else t.container.appendChild(e.app);
          t.useAsButton ? t.inline && t.el.remove() : t.el.parentNode.replaceChild(e.root, t.el),
            t.disabled && this.disable(),
            t.comparison ||
              ((e.button.style.transition = "none"), t.useAsButton || (e.preview.lastColor.style.transition = "none")),
            this.hide();
        }
        _buildComponents() {
          const t = this,
            e = this.options.components,
            o = (t.options.sliders || "v").repeat(2),
            [n, i] = o.match(/^[vh]+$/g) ? o : [],
            s = () => this._color || (this._color = this._lastColor.clone()),
            r = {
              palette: C({
                element: t._root.palette.picker,
                wrapper: t._root.palette.palette,
                onstop: () => t._emit("changestop", "slider", t),
                onchange(o, n) {
                  if (!e.palette) return;
                  const i = s(),
                    { _root: r, options: a } = t,
                    { lastColor: l, currentColor: c } = r.preview;
                  t._recalc &&
                    ((i.s = 100 * o), (i.v = 100 - 100 * n), i.v < 0 && (i.v = 0), t._updateOutput("slider"));
                  const p = i.toRGBA().toString(0);
                  (this.element.style.background = p),
                    (this.wrapper.style.background = `\n                        linear-gradient(to top, rgba(0, 0, 0, ${i.a}), transparent),\n                        linear-gradient(to left, hsla(${i.h}, 100%, 50%, ${i.a}), rgba(255, 255, 255, ${i.a}))\n                    `),
                    a.comparison
                      ? a.useAsButton || t._lastColor || l.style.setProperty("--pcr-color", p)
                      : (r.button.style.setProperty("--pcr-color", p), r.button.classList.remove("clear"));
                  const u = i.toHEXA().toString();
                  for (const { el: e, color: o } of t._swatchColors)
                    e.classList[u === o.toHEXA().toString() ? "add" : "remove"]("pcr-active");
                  c.style.setProperty("--pcr-color", p);
                },
              }),
              hue: C({
                lock: "v" === i ? "h" : "v",
                element: t._root.hue.picker,
                wrapper: t._root.hue.slider,
                onstop: () => t._emit("changestop", "slider", t),
                onchange(o) {
                  if (!e.hue || !e.palette) return;
                  const n = s();
                  t._recalc && (n.h = 360 * o),
                    (this.element.style.backgroundColor = `hsl(${n.h}, 100%, 50%)`),
                    r.palette.trigger();
                },
              }),
              opacity: C({
                lock: "v" === n ? "h" : "v",
                element: t._root.opacity.picker,
                wrapper: t._root.opacity.slider,
                onstop: () => t._emit("changestop", "slider", t),
                onchange(o) {
                  if (!e.opacity || !e.palette) return;
                  const n = s();
                  t._recalc && (n.a = Math.round(100 * o) / 100),
                    (this.element.style.background = `rgba(0, 0, 0, ${n.a})`),
                    r.palette.trigger();
                },
              }),
              selectable: k({
                elements: t._root.interaction.options,
                className: "active",
                onchange(e) {
                  (t._representation = e.target.getAttribute("data-type").toUpperCase()),
                    t._recalc && t._updateOutput("swatch");
                },
              }),
            };
          this._components = r;
        }
        _bindEvents() {
          const { _root: t, options: e } = this,
            o = [
              i(t.interaction.clear, "click", () => this._clearColor()),
              i([t.interaction.cancel, t.preview.lastColor], "click", () => {
                this.setHSVA(...(this._lastColor || this._color).toHSVA(), !0), this._emit("cancel");
              }),
              i(t.interaction.save, "click", () => {
                !this.applyColor() && !e.showAlways && this.hide();
              }),
              i(t.interaction.result, ["keyup", "input"], (t) => {
                this.setColor(t.target.value, !0) &&
                  !this._initializingActive &&
                  (this._emit("change", this._color, "input", this), this._emit("changestop", "input", this)),
                  t.stopImmediatePropagation();
              }),
              i(t.interaction.result, ["focus", "blur"], (t) => {
                (this._recalc = "blur" === t.type), this._recalc && this._updateOutput(null);
              }),
              i(
                [t.palette.palette, t.palette.picker, t.hue.slider, t.hue.picker, t.opacity.slider, t.opacity.picker],
                ["mousedown", "touchstart"],
                () => (this._recalc = !0),
                { passive: !0 }
              ),
            ];
          if (!e.showAlways) {
            const n = e.closeWithKey;
            o.push(
              i(t.button, "click", () => (this.isOpen() ? this.hide() : this.show())),
              i(document, "keyup", (t) => this.isOpen() && (t.key === n || t.code === n) && this.hide()),
              i(
                document,
                ["touchstart", "mousedown"],
                (e) => {
                  this.isOpen() && !l(e).some((e) => e === t.app || e === t.button) && this.hide();
                },
                { capture: !0 }
              )
            );
          }
          if (e.adjustableNumbers) {
            const e = {
              rgba: [255, 255, 255, 1],
              hsva: [360, 100, 100, 1],
              hsla: [360, 100, 100, 1],
              cmyk: [100, 100, 100, 100],
            };
            p(t.interaction.result, (t, o, n) => {
              const i = e[this.getColorRepresentation().toLowerCase()];
              if (i) {
                const e = i[n],
                  s = t + (e >= 100 ? 1e3 * o : o);
                return s <= 0 ? 0 : Number((s < e ? s : e).toPrecision(3));
              }
              return t;
            });
          }
          if (e.autoReposition && !e.inline) {
            let t = null;
            const n = this;
            o.push(
              i(
                window,
                ["scroll", "resize"],
                () => {
                  n.isOpen() &&
                    (e.closeOnScroll && n.hide(),
                    null === t
                      ? ((t = setTimeout(() => (t = null), 100)),
                        requestAnimationFrame(function e() {
                          n._rePositioningPicker(), null !== t && requestAnimationFrame(e);
                        }))
                      : (clearTimeout(t), (t = setTimeout(() => (t = null), 100))));
                },
                { capture: !0 }
              )
            );
          }
          this._eventBindings = o;
        }
        _rePositioningPicker() {
          const { options: t } = this;
          if (!t.inline) {
            if (!this._nanopop.update({ container: document.body.getBoundingClientRect(), position: t.position })) {
              const t = this._root.app,
                e = t.getBoundingClientRect();
              (t.style.top = (window.innerHeight - e.height) / 2 + "px"),
                (t.style.left = (window.innerWidth - e.width) / 2 + "px");
            }
          }
        }
        _updateOutput(t) {
          const { _root: e, _color: o, options: n } = this;
          if (e.interaction.type()) {
            const t = `to${e.interaction.type().getAttribute("data-type")}`;
            e.interaction.result.value = "function" == typeof o[t] ? o[t]().toString(n.outputPrecision) : "";
          }
          !this._initializingActive && this._recalc && this._emit("change", o, t, this);
        }
        _clearColor(t = !1) {
          const { _root: e, options: o } = this;
          o.useAsButton || e.button.style.setProperty("--pcr-color", "rgba(0, 0, 0, 0.15)"),
            e.button.classList.add("clear"),
            o.showAlways || this.hide(),
            (this._lastColor = null),
            this._initializingActive || t || (this._emit("save", null), this._emit("clear"));
        }
        _parseLocalColor(t) {
          const { values: e, type: o, a: n } = w(t),
            { lockOpacity: i } = this.options,
            s = void 0 !== n && 1 !== n;
          return e && 3 === e.length && (e[3] = void 0), { values: !e || (i && s) ? null : e, type: o };
        }
        _t(t) {
          return this.options.i18n[t] || E.I18N_DEFAULTS[t];
        }
        _emit(t, ...e) {
          this._eventListener[t].forEach((t) => t(...e, this));
        }
        on(t, e) {
          return this._eventListener[t].push(e), this;
        }
        off(t, e) {
          const o = this._eventListener[t] || [],
            n = o.indexOf(e);
          return ~n && o.splice(n, 1), this;
        }
        addSwatch(t) {
          const { values: e } = this._parseLocalColor(t);
          if (e) {
            const { _swatchColors: t, _root: o } = this,
              n = A(...e),
              s = r(
                `<button type="button" style="--pcr-color: ${n.toRGBA().toString(0)}" aria-label="${this._t(
                  "btn:swatch"
                )}"/>`
              );
            return (
              o.swatches.appendChild(s),
              t.push({ el: s, color: n }),
              this._eventBindings.push(
                i(s, "click", () => {
                  this.setHSVA(...n.toHSVA(), !0),
                    this._emit("swatchselect", n),
                    this._emit("change", n, "swatch", this);
                })
              ),
              !0
            );
          }
          return !1;
        }
        removeSwatch(t) {
          const e = this._swatchColors[t];
          if (e) {
            const { el: o } = e;
            return this._root.swatches.removeChild(o), this._swatchColors.splice(t, 1), !0;
          }
          return !1;
        }
        applyColor(t = !1) {
          const { preview: e, button: o } = this._root,
            n = this._color.toRGBA().toString(0);
          return (
            e.lastColor.style.setProperty("--pcr-color", n),
            this.options.useAsButton || o.style.setProperty("--pcr-color", n),
            o.classList.remove("clear"),
            (this._lastColor = this._color.clone()),
            this._initializingActive || t || this._emit("save", this._color),
            this
          );
        }
        destroy() {
          cancelAnimationFrame(this._setupAnimationFrame),
            this._eventBindings.forEach((t) => s(...t)),
            Object.keys(this._components).forEach((t) => this._components[t].destroy());
        }
        destroyAndRemove() {
          this.destroy();
          const { root: t, app: e } = this._root;
          t.parentElement && t.parentElement.removeChild(t),
            e.parentElement.removeChild(e),
            Object.keys(this).forEach((t) => (this[t] = null));
        }
        hide() {
          return !!this.isOpen() && (this._root.app.classList.remove("visible"), this._emit("hide"), !0);
        }
        show() {
          return (
            !this.options.disabled &&
            !this.isOpen() &&
            (this._root.app.classList.add("visible"),
            this._rePositioningPicker(),
            this._emit("show", this._color),
            this)
          );
        }
        isOpen() {
          return this._root.app.classList.contains("visible");
        }
        setHSVA(t = 360, e = 0, o = 0, n = 1, i = !1) {
          const s = this._recalc;
          if (((this._recalc = !1), t < 0 || t > 360 || e < 0 || e > 100 || o < 0 || o > 100 || n < 0 || n > 1))
            return !1;
          this._color = A(t, e, o, n);
          const { hue: r, opacity: a, palette: l } = this._components;
          return (
            r.update(t / 360),
            a.update(n),
            l.update(e / 100, 1 - o / 100),
            i || this.applyColor(),
            s && this._updateOutput(),
            (this._recalc = s),
            !0
          );
        }
        setColor(t, e = !1) {
          if (null === t) return this._clearColor(e), !0;
          const { values: o, type: n } = this._parseLocalColor(t);
          if (o) {
            const t = n.toUpperCase(),
              { options: i } = this._root.interaction,
              s = i.find((e) => e.getAttribute("data-type") === t);
            if (s && !s.hidden) for (const t of i) t.classList[t === s ? "add" : "remove"]("active");
            return !!this.setHSVA(...o, e) && this.setColorRepresentation(t);
          }
          return !1;
        }
        setColorRepresentation(t) {
          return (
            (t = t.toUpperCase()),
            !!this._root.interaction.options.find((e) => e.getAttribute("data-type").startsWith(t) && !e.click())
          );
        }
        getColorRepresentation() {
          return this._representation;
        }
        getColor() {
          return this._color;
        }
        getSelectedColor() {
          return this._lastColor;
        }
        getRoot() {
          return this._root;
        }
        disable() {
          return this.hide(), (this.options.disabled = !0), this._root.button.classList.add("disabled"), this;
        }
        enable() {
          return (this.options.disabled = !1), this._root.button.classList.remove("disabled"), this;
        }
      }
      return (e = e.default);
    })()
  );
});

var Pickr = /*@__PURE__*/ getDefaultExportFromCjs(pickr_min);

/**!
 * Sortable 1.15.0
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype
        ? "symbol"
        : typeof obj;
    };
  }

  return _typeof(obj);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true,
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends =
    Object.assign ||
    function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var version = "1.15.0";

function userAgent(pattern) {
  if (typeof window !== "undefined" && window.navigator) {
    return !!(/*@__PURE__*/ navigator.userAgent.match(pattern));
  }
}

var IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i);
var Edge = userAgent(/Edge/i);
var FireFox = userAgent(/firefox/i);
var Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);
var IOS = userAgent(/iP(ad|od|hone)/i);
var ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);

var captureMode = {
  capture: false,
  passive: false,
};

function on(el, event, fn) {
  el.addEventListener(event, fn, !IE11OrLess && captureMode);
}

function off(el, event, fn) {
  el.removeEventListener(event, fn, !IE11OrLess && captureMode);
}

function matches(
  /**HTMLElement*/
  el,
  /**String*/
  selector
) {
  if (!selector) return;
  selector[0] === ">" && (selector = selector.substring(1));

  if (el) {
    try {
      if (el.matches) {
        return el.matches(selector);
      } else if (el.msMatchesSelector) {
        return el.msMatchesSelector(selector);
      } else if (el.webkitMatchesSelector) {
        return el.webkitMatchesSelector(selector);
      }
    } catch (_) {
      return false;
    }
  }

  return false;
}

function getParentOrHost(el) {
  return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;
}

function closest(
  /**HTMLElement*/
  el,
  /**String*/
  selector,
  /**HTMLElement*/
  ctx,
  includeCTX
) {
  if (el) {
    ctx = ctx || document;

    do {
      if (
        (selector != null &&
          (selector[0] === ">" ? el.parentNode === ctx && matches(el, selector) : matches(el, selector))) ||
        (includeCTX && el === ctx)
      ) {
        return el;
      }

      if (el === ctx) break;
      /* jshint boss:true */
    } while ((el = getParentOrHost(el)));
  }

  return null;
}

var R_SPACE = /\s+/g;

function toggleClass(el, name, state) {
  if (el && name) {
    if (el.classList) {
      el.classList[state ? "add" : "remove"](name);
    } else {
      var className = (" " + el.className + " ").replace(R_SPACE, " ").replace(" " + name + " ", " ");
      el.className = (className + (state ? " " + name : "")).replace(R_SPACE, " ");
    }
  }
}

function css(el, prop, val) {
  var style = el && el.style;

  if (style) {
    if (val === void 0) {
      if (document.defaultView && document.defaultView.getComputedStyle) {
        val = document.defaultView.getComputedStyle(el, "");
      } else if (el.currentStyle) {
        val = el.currentStyle;
      }

      return prop === void 0 ? val : val[prop];
    } else {
      if (!(prop in style) && prop.indexOf("webkit") === -1) {
        prop = "-webkit-" + prop;
      }

      style[prop] = val + (typeof val === "string" ? "" : "px");
    }
  }
}

function matrix(el, selfOnly) {
  var appliedTransforms = "";

  if (typeof el === "string") {
    appliedTransforms = el;
  } else {
    do {
      var transform = css(el, "transform");

      if (transform && transform !== "none") {
        appliedTransforms = transform + " " + appliedTransforms;
      }
      /* jshint boss:true */
    } while (!selfOnly && (el = el.parentNode));
  }

  var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;
  /*jshint -W056 */

  return matrixFn && new matrixFn(appliedTransforms);
}

function find(ctx, tagName, iterator) {
  if (ctx) {
    var list = ctx.getElementsByTagName(tagName),
      i = 0,
      n = list.length;

    if (iterator) {
      for (; i < n; i++) {
        iterator(list[i], i);
      }
    }

    return list;
  }

  return [];
}

function getWindowScrollingElement() {
  var scrollingElement = document.scrollingElement;

  if (scrollingElement) {
    return scrollingElement;
  } else {
    return document.documentElement;
  }
}
/**
 * Returns the "bounding client rect" of given element
 * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted
 * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container
 * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr
 * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone
 * @param  {[HTMLElement]} container              The parent the element will be placed in
 * @return {Object}                               The boundingClientRect of el, with specified adjustments
 */

function getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {
  if (!el.getBoundingClientRect && el !== window) return;
  var elRect, top, left, bottom, right, height, width;

  if (el !== window && el.parentNode && el !== getWindowScrollingElement()) {
    elRect = el.getBoundingClientRect();
    top = elRect.top;
    left = elRect.left;
    bottom = elRect.bottom;
    right = elRect.right;
    height = elRect.height;
    width = elRect.width;
  } else {
    top = 0;
    left = 0;
    bottom = window.innerHeight;
    right = window.innerWidth;
    height = window.innerHeight;
    width = window.innerWidth;
  }

  if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {
    // Adjust for translate()
    container = container || el.parentNode; // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)
    // Not needed on <= IE11

    if (!IE11OrLess) {
      do {
        if (
          container &&
          container.getBoundingClientRect &&
          (css(container, "transform") !== "none" ||
            (relativeToNonStaticParent && css(container, "position") !== "static"))
        ) {
          var containerRect = container.getBoundingClientRect(); // Set relative to edges of padding box of container

          top -= containerRect.top + parseInt(css(container, "border-top-width"));
          left -= containerRect.left + parseInt(css(container, "border-left-width"));
          bottom = top + elRect.height;
          right = left + elRect.width;
          break;
        }
        /* jshint boss:true */
      } while ((container = container.parentNode));
    }
  }

  if (undoScale && el !== window) {
    // Adjust for scale()
    var elMatrix = matrix(container || el),
      scaleX = elMatrix && elMatrix.a,
      scaleY = elMatrix && elMatrix.d;

    if (elMatrix) {
      top /= scaleY;
      left /= scaleX;
      width /= scaleX;
      height /= scaleY;
      bottom = top + height;
      right = left + width;
    }
  }

  return {
    top: top,
    left: left,
    bottom: bottom,
    right: right,
    width: width,
    height: height,
  };
}
/**
 * Checks if a side of an element is scrolled past a side of its parents
 * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question
 * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')
 * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')
 * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element
 */

function isScrolledPast(el, elSide, parentSide) {
  var parent = getParentAutoScrollElement(el, true),
    elSideVal = getRect(el)[elSide];
  /* jshint boss:true */

  while (parent) {
    var parentSideVal = getRect(parent)[parentSide],
      visible = void 0;

    if (parentSide === "top" || parentSide === "left") {
      visible = elSideVal >= parentSideVal;
    } else {
      visible = elSideVal <= parentSideVal;
    }

    if (!visible) return parent;
    if (parent === getWindowScrollingElement()) break;
    parent = getParentAutoScrollElement(parent, false);
  }

  return false;
}
/**
 * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)
 * and non-draggable elements
 * @param  {HTMLElement} el       The parent element
 * @param  {Number} childNum      The index of the child
 * @param  {Object} options       Parent Sortable's options
 * @return {HTMLElement}          The child at index childNum, or null if not found
 */

function getChild(el, childNum, options, includeDragEl) {
  var currentChild = 0,
    i = 0,
    children = el.children;

  while (i < children.length) {
    if (
      children[i].style.display !== "none" &&
      children[i] !== Sortable.ghost &&
      (includeDragEl || children[i] !== Sortable.dragged) &&
      closest(children[i], options.draggable, el, false)
    ) {
      if (currentChild === childNum) {
        return children[i];
      }

      currentChild++;
    }

    i++;
  }

  return null;
}
/**
 * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)
 * @param  {HTMLElement} el       Parent element
 * @param  {selector} selector    Any other elements that should be ignored
 * @return {HTMLElement}          The last child, ignoring ghostEl
 */

function lastChild(el, selector) {
  var last = el.lastElementChild;

  while (
    last &&
    (last === Sortable.ghost || css(last, "display") === "none" || (selector && !matches(last, selector)))
  ) {
    last = last.previousElementSibling;
  }

  return last || null;
}
/**
 * Returns the index of an element within its parent for a selected set of
 * elements
 * @param  {HTMLElement} el
 * @param  {selector} selector
 * @return {number}
 */

function index(el, selector) {
  var index = 0;

  if (!el || !el.parentNode) {
    return -1;
  }
  /* jshint boss:true */

  while ((el = el.previousElementSibling)) {
    if (el.nodeName.toUpperCase() !== "TEMPLATE" && el !== Sortable.clone && (!selector || matches(el, selector))) {
      index++;
    }
  }

  return index;
}
/**
 * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.
 * The value is returned in real pixels.
 * @param  {HTMLElement} el
 * @return {Array}             Offsets in the format of [left, top]
 */

function getRelativeScrollOffset(el) {
  var offsetLeft = 0,
    offsetTop = 0,
    winScroller = getWindowScrollingElement();

  if (el) {
    do {
      var elMatrix = matrix(el),
        scaleX = elMatrix.a,
        scaleY = elMatrix.d;
      offsetLeft += el.scrollLeft * scaleX;
      offsetTop += el.scrollTop * scaleY;
    } while (el !== winScroller && (el = el.parentNode));
  }

  return [offsetLeft, offsetTop];
}
/**
 * Returns the index of the object within the given array
 * @param  {Array} arr   Array that may or may not hold the object
 * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find
 * @return {Number}      The index of the object in the array, or -1
 */

function indexOfObject(arr, obj) {
  for (var i in arr) {
    if (!arr.hasOwnProperty(i)) continue;

    for (var key in obj) {
      if (obj.hasOwnProperty(key) && obj[key] === arr[i][key]) return Number(i);
    }
  }

  return -1;
}

function getParentAutoScrollElement(el, includeSelf) {
  // skip to window
  if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();
  var elem = el;
  var gotSelf = false;

  do {
    // we don't need to get elem css if it isn't even overflowing in the first place (performance)
    if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {
      var elemCSS = css(elem);

      if (
        (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == "auto" || elemCSS.overflowX == "scroll")) ||
        (elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == "auto" || elemCSS.overflowY == "scroll"))
      ) {
        if (!elem.getBoundingClientRect || elem === document.body) return getWindowScrollingElement();
        if (gotSelf || includeSelf) return elem;
        gotSelf = true;
      }
    }
    /* jshint boss:true */
  } while ((elem = elem.parentNode));

  return getWindowScrollingElement();
}

function extend(dst, src) {
  if (dst && src) {
    for (var key in src) {
      if (src.hasOwnProperty(key)) {
        dst[key] = src[key];
      }
    }
  }

  return dst;
}

function isRectEqual(rect1, rect2) {
  return (
    Math.round(rect1.top) === Math.round(rect2.top) &&
    Math.round(rect1.left) === Math.round(rect2.left) &&
    Math.round(rect1.height) === Math.round(rect2.height) &&
    Math.round(rect1.width) === Math.round(rect2.width)
  );
}

var _throttleTimeout;

function throttle(callback, ms) {
  return function () {
    if (!_throttleTimeout) {
      var args = arguments,
        _this = this;

      if (args.length === 1) {
        callback.call(_this, args[0]);
      } else {
        callback.apply(_this, args);
      }

      _throttleTimeout = setTimeout(function () {
        _throttleTimeout = void 0;
      }, ms);
    }
  };
}

function cancelThrottle() {
  clearTimeout(_throttleTimeout);
  _throttleTimeout = void 0;
}

function scrollBy(el, x, y) {
  el.scrollLeft += x;
  el.scrollTop += y;
}

function clone(el) {
  var Polymer = window.Polymer;
  var $ = window.jQuery || window.Zepto;

  if (Polymer && Polymer.dom) {
    return Polymer.dom(el).cloneNode(true);
  } else if ($) {
    return $(el).clone(true)[0];
  } else {
    return el.cloneNode(true);
  }
}

var expando = "Sortable" + new Date().getTime();

function AnimationStateManager() {
  var animationStates = [],
    animationCallbackId;
  return {
    captureAnimationState: function captureAnimationState() {
      animationStates = [];
      if (!this.options.animation) return;
      var children = [].slice.call(this.el.children);
      children.forEach(function (child) {
        if (css(child, "display") === "none" || child === Sortable.ghost) return;
        animationStates.push({
          target: child,
          rect: getRect(child),
        });

        var fromRect = _objectSpread2({}, animationStates[animationStates.length - 1].rect); // If animating: compensate for current animation

        if (child.thisAnimationDuration) {
          var childMatrix = matrix(child, true);

          if (childMatrix) {
            fromRect.top -= childMatrix.f;
            fromRect.left -= childMatrix.e;
          }
        }

        child.fromRect = fromRect;
      });
    },
    addAnimationState: function addAnimationState(state) {
      animationStates.push(state);
    },
    removeAnimationState: function removeAnimationState(target) {
      animationStates.splice(
        indexOfObject(animationStates, {
          target: target,
        }),
        1
      );
    },
    animateAll: function animateAll(callback) {
      var _this = this;

      if (!this.options.animation) {
        clearTimeout(animationCallbackId);
        if (typeof callback === "function") callback();
        return;
      }

      var animating = false,
        animationTime = 0;
      animationStates.forEach(function (state) {
        var time = 0,
          target = state.target,
          fromRect = target.fromRect,
          toRect = getRect(target),
          prevFromRect = target.prevFromRect,
          prevToRect = target.prevToRect,
          animatingRect = state.rect,
          targetMatrix = matrix(target, true);

        if (targetMatrix) {
          // Compensate for current animation
          toRect.top -= targetMatrix.f;
          toRect.left -= targetMatrix.e;
        }

        target.toRect = toRect;

        if (target.thisAnimationDuration) {
          // Could also check if animatingRect is between fromRect and toRect
          if (
            isRectEqual(prevFromRect, toRect) &&
            !isRectEqual(fromRect, toRect) && // Make sure animatingRect is on line between toRect & fromRect
            (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) ===
              (fromRect.top - toRect.top) / (fromRect.left - toRect.left)
          ) {
            // If returning to same place as started from animation and on same axis
            time = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);
          }
        } // if fromRect != toRect: animate

        if (!isRectEqual(toRect, fromRect)) {
          target.prevFromRect = fromRect;
          target.prevToRect = toRect;

          if (!time) {
            time = _this.options.animation;
          }

          _this.animate(target, animatingRect, toRect, time);
        }

        if (time) {
          animating = true;
          animationTime = Math.max(animationTime, time);
          clearTimeout(target.animationResetTimer);
          target.animationResetTimer = setTimeout(function () {
            target.animationTime = 0;
            target.prevFromRect = null;
            target.fromRect = null;
            target.prevToRect = null;
            target.thisAnimationDuration = null;
          }, time);
          target.thisAnimationDuration = time;
        }
      });
      clearTimeout(animationCallbackId);

      if (!animating) {
        if (typeof callback === "function") callback();
      } else {
        animationCallbackId = setTimeout(function () {
          if (typeof callback === "function") callback();
        }, animationTime);
      }

      animationStates = [];
    },
    animate: function animate(target, currentRect, toRect, duration) {
      if (duration) {
        css(target, "transition", "");
        css(target, "transform", "");
        var elMatrix = matrix(this.el),
          scaleX = elMatrix && elMatrix.a,
          scaleY = elMatrix && elMatrix.d,
          translateX = (currentRect.left - toRect.left) / (scaleX || 1),
          translateY = (currentRect.top - toRect.top) / (scaleY || 1);
        target.animatingX = !!translateX;
        target.animatingY = !!translateY;
        css(target, "transform", "translate3d(" + translateX + "px," + translateY + "px,0)");
        this.forRepaintDummy = repaint(target); // repaint

        css(
          target,
          "transition",
          "transform " + duration + "ms" + (this.options.easing ? " " + this.options.easing : "")
        );
        css(target, "transform", "translate3d(0,0,0)");
        typeof target.animated === "number" && clearTimeout(target.animated);
        target.animated = setTimeout(function () {
          css(target, "transition", "");
          css(target, "transform", "");
          target.animated = false;
          target.animatingX = false;
          target.animatingY = false;
        }, duration);
      }
    },
  };
}

function repaint(target) {
  return target.offsetWidth;
}

function calculateRealTime(animatingRect, fromRect, toRect, options) {
  return (
    (Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) /
      Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2))) *
    options.animation
  );
}

var plugins = [];
var defaults = {
  initializeByDefault: true,
};
var PluginManager = {
  mount: function mount(plugin) {
    // Set default static properties
    for (var option in defaults) {
      if (defaults.hasOwnProperty(option) && !(option in plugin)) {
        plugin[option] = defaults[option];
      }
    }

    plugins.forEach(function (p) {
      if (p.pluginName === plugin.pluginName) {
        throw "Sortable: Cannot mount plugin ".concat(plugin.pluginName, " more than once");
      }
    });
    plugins.push(plugin);
  },
  pluginEvent: function pluginEvent(eventName, sortable, evt) {
    var _this = this;

    this.eventCanceled = false;

    evt.cancel = function () {
      _this.eventCanceled = true;
    };

    var eventNameGlobal = eventName + "Global";
    plugins.forEach(function (plugin) {
      if (!sortable[plugin.pluginName]) return; // Fire global events if it exists in this sortable

      if (sortable[plugin.pluginName][eventNameGlobal]) {
        sortable[plugin.pluginName][eventNameGlobal](
          _objectSpread2(
            {
              sortable: sortable,
            },
            evt
          )
        );
      } // Only fire plugin event if plugin is enabled in this sortable,
      // and plugin has event defined

      if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {
        sortable[plugin.pluginName][eventName](
          _objectSpread2(
            {
              sortable: sortable,
            },
            evt
          )
        );
      }
    });
  },
  initializePlugins: function initializePlugins(sortable, el, defaults, options) {
    plugins.forEach(function (plugin) {
      var pluginName = plugin.pluginName;
      if (!sortable.options[pluginName] && !plugin.initializeByDefault) return;
      var initialized = new plugin(sortable, el, sortable.options);
      initialized.sortable = sortable;
      initialized.options = sortable.options;
      sortable[pluginName] = initialized; // Add default options from plugin

      _extends(defaults, initialized.defaults);
    });

    for (var option in sortable.options) {
      if (!sortable.options.hasOwnProperty(option)) continue;
      var modified = this.modifyOption(sortable, option, sortable.options[option]);

      if (typeof modified !== "undefined") {
        sortable.options[option] = modified;
      }
    }
  },
  getEventProperties: function getEventProperties(name, sortable) {
    var eventProperties = {};
    plugins.forEach(function (plugin) {
      if (typeof plugin.eventProperties !== "function") return;

      _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name));
    });
    return eventProperties;
  },
  modifyOption: function modifyOption(sortable, name, value) {
    var modifiedValue;
    plugins.forEach(function (plugin) {
      // Plugin must exist on the Sortable
      if (!sortable[plugin.pluginName]) return; // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin

      if (plugin.optionListeners && typeof plugin.optionListeners[name] === "function") {
        modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);
      }
    });
    return modifiedValue;
  },
};

function dispatchEvent$1(_ref) {
  var sortable = _ref.sortable,
    rootEl = _ref.rootEl,
    name = _ref.name,
    targetEl = _ref.targetEl,
    cloneEl = _ref.cloneEl,
    toEl = _ref.toEl,
    fromEl = _ref.fromEl,
    oldIndex = _ref.oldIndex,
    newIndex = _ref.newIndex,
    oldDraggableIndex = _ref.oldDraggableIndex,
    newDraggableIndex = _ref.newDraggableIndex,
    originalEvent = _ref.originalEvent,
    putSortable = _ref.putSortable,
    extraEventProperties = _ref.extraEventProperties;
  sortable = sortable || (rootEl && rootEl[expando]);
  if (!sortable) return;
  var evt,
    options = sortable.options,
    onName = "on" + name.charAt(0).toUpperCase() + name.substr(1); // Support for new CustomEvent feature

  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent(name, {
      bubbles: true,
      cancelable: true,
    });
  } else {
    evt = document.createEvent("Event");
    evt.initEvent(name, true, true);
  }

  evt.to = toEl || rootEl;
  evt.from = fromEl || rootEl;
  evt.item = targetEl || rootEl;
  evt.clone = cloneEl;
  evt.oldIndex = oldIndex;
  evt.newIndex = newIndex;
  evt.oldDraggableIndex = oldDraggableIndex;
  evt.newDraggableIndex = newDraggableIndex;
  evt.originalEvent = originalEvent;
  evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;

  var allEventProperties = _objectSpread2(
    _objectSpread2({}, extraEventProperties),
    PluginManager.getEventProperties(name, sortable)
  );

  for (var option in allEventProperties) {
    evt[option] = allEventProperties[option];
  }

  if (rootEl) {
    rootEl.dispatchEvent(evt);
  }

  if (options[onName]) {
    options[onName].call(sortable, evt);
  }
}

var _excluded = ["evt"];

var pluginEvent = function pluginEvent(eventName, sortable) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
    originalEvent = _ref.evt,
    data = _objectWithoutProperties(_ref, _excluded);

  PluginManager.pluginEvent.bind(Sortable)(
    eventName,
    sortable,
    _objectSpread2(
      {
        dragEl: dragEl,
        parentEl: parentEl,
        ghostEl: ghostEl,
        rootEl: rootEl,
        nextEl: nextEl,
        lastDownEl: lastDownEl,
        cloneEl: cloneEl,
        cloneHidden: cloneHidden,
        dragStarted: moved,
        putSortable: putSortable,
        activeSortable: Sortable.active,
        originalEvent: originalEvent,
        oldIndex: oldIndex,
        oldDraggableIndex: oldDraggableIndex,
        newIndex: newIndex,
        newDraggableIndex: newDraggableIndex,
        hideGhostForTarget: _hideGhostForTarget,
        unhideGhostForTarget: _unhideGhostForTarget,
        cloneNowHidden: function cloneNowHidden() {
          cloneHidden = true;
        },
        cloneNowShown: function cloneNowShown() {
          cloneHidden = false;
        },
        dispatchSortableEvent: function dispatchSortableEvent(name) {
          _dispatchEvent({
            sortable: sortable,
            name: name,
            originalEvent: originalEvent,
          });
        },
      },
      data
    )
  );
};

function _dispatchEvent(info) {
  dispatchEvent$1(
    _objectSpread2(
      {
        putSortable: putSortable,
        cloneEl: cloneEl,
        targetEl: dragEl,
        rootEl: rootEl,
        oldIndex: oldIndex,
        oldDraggableIndex: oldDraggableIndex,
        newIndex: newIndex,
        newDraggableIndex: newDraggableIndex,
      },
      info
    )
  );
}

var dragEl,
  parentEl,
  ghostEl,
  rootEl,
  nextEl,
  lastDownEl,
  cloneEl,
  cloneHidden,
  oldIndex,
  newIndex,
  oldDraggableIndex,
  newDraggableIndex,
  activeGroup,
  putSortable,
  awaitingDragStarted = false,
  ignoreNextClick = false,
  sortables = [],
  tapEvt,
  touchEvt,
  lastDx,
  lastDy,
  tapDistanceLeft,
  tapDistanceTop,
  moved,
  lastTarget,
  lastDirection,
  pastFirstInvertThresh = false,
  isCircumstantialInvert = false,
  targetMoveDistance,
  // For positioning ghost absolutely
  ghostRelativeParent,
  ghostRelativeParentInitialScroll = [],
  // (left, top)
  _silent = false,
  savedInputChecked = [];
/** @const */

var documentExists = typeof document !== "undefined",
  PositionGhostAbsolutely = IOS,
  CSSFloatProperty = Edge || IE11OrLess ? "cssFloat" : "float",
  // This will not pass for IE9, because IE9 DnD only works on anchors
  supportDraggable = documentExists && !ChromeForAndroid && !IOS && "draggable" in document.createElement("div"),
  supportCssPointerEvents = (function () {
    if (!documentExists) return; // false when <= IE11

    if (IE11OrLess) {
      return false;
    }

    var el = document.createElement("x");
    el.style.cssText = "pointer-events:auto";
    return el.style.pointerEvents === "auto";
  })(),
  _detectDirection = function _detectDirection(el, options) {
    var elCSS = css(el),
      elWidth =
        parseInt(elCSS.width) -
        parseInt(elCSS.paddingLeft) -
        parseInt(elCSS.paddingRight) -
        parseInt(elCSS.borderLeftWidth) -
        parseInt(elCSS.borderRightWidth),
      child1 = getChild(el, 0, options),
      child2 = getChild(el, 1, options),
      firstChildCSS = child1 && css(child1),
      secondChildCSS = child2 && css(child2),
      firstChildWidth =
        firstChildCSS &&
        parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width,
      secondChildWidth =
        secondChildCSS &&
        parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;

    if (elCSS.display === "flex") {
      return elCSS.flexDirection === "column" || elCSS.flexDirection === "column-reverse" ? "vertical" : "horizontal";
    }

    if (elCSS.display === "grid") {
      return elCSS.gridTemplateColumns.split(" ").length <= 1 ? "vertical" : "horizontal";
    }

    if (child1 && firstChildCSS["float"] && firstChildCSS["float"] !== "none") {
      var touchingSideChild2 = firstChildCSS["float"] === "left" ? "left" : "right";
      return child2 && (secondChildCSS.clear === "both" || secondChildCSS.clear === touchingSideChild2)
        ? "vertical"
        : "horizontal";
    }

    return child1 &&
      (firstChildCSS.display === "block" ||
        firstChildCSS.display === "flex" ||
        firstChildCSS.display === "table" ||
        firstChildCSS.display === "grid" ||
        (firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === "none") ||
        (child2 && elCSS[CSSFloatProperty] === "none" && firstChildWidth + secondChildWidth > elWidth))
      ? "vertical"
      : "horizontal";
  },
  _dragElInRowColumn = function _dragElInRowColumn(dragRect, targetRect, vertical) {
    var dragElS1Opp = vertical ? dragRect.left : dragRect.top,
      dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,
      dragElOppLength = vertical ? dragRect.width : dragRect.height,
      targetS1Opp = vertical ? targetRect.left : targetRect.top,
      targetS2Opp = vertical ? targetRect.right : targetRect.bottom,
      targetOppLength = vertical ? targetRect.width : targetRect.height;
    return (
      dragElS1Opp === targetS1Opp ||
      dragElS2Opp === targetS2Opp ||
      dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2
    );
  },
  /**
   * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.
   * @param  {Number} x      X position
   * @param  {Number} y      Y position
   * @return {HTMLElement}   Element of the first found nearest Sortable
   */
  _detectNearestEmptySortable = function _detectNearestEmptySortable(x, y) {
    var ret;
    sortables.some(function (sortable) {
      var threshold = sortable[expando].options.emptyInsertThreshold;
      if (!threshold || lastChild(sortable)) return;
      var rect = getRect(sortable),
        insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold,
        insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;

      if (insideHorizontally && insideVertically) {
        return (ret = sortable);
      }
    });
    return ret;
  },
  _prepareGroup = function _prepareGroup(options) {
    function toFn(value, pull) {
      return function (to, from, dragEl, evt) {
        var sameGroup =
          to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;

        if (value == null && (pull || sameGroup)) {
          // Default pull value
          // Default pull and put value if same group
          return true;
        } else if (value == null || value === false) {
          return false;
        } else if (pull && value === "clone") {
          return value;
        } else if (typeof value === "function") {
          return toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);
        } else {
          var otherGroup = (pull ? to : from).options.group.name;
          return (
            value === true ||
            (typeof value === "string" && value === otherGroup) ||
            (value.join && value.indexOf(otherGroup) > -1)
          );
        }
      };
    }

    var group = {};
    var originalGroup = options.group;

    if (!originalGroup || _typeof(originalGroup) != "object") {
      originalGroup = {
        name: originalGroup,
      };
    }

    group.name = originalGroup.name;
    group.checkPull = toFn(originalGroup.pull, true);
    group.checkPut = toFn(originalGroup.put);
    group.revertClone = originalGroup.revertClone;
    options.group = group;
  },
  _hideGhostForTarget = function _hideGhostForTarget() {
    if (!supportCssPointerEvents && ghostEl) {
      css(ghostEl, "display", "none");
    }
  },
  _unhideGhostForTarget = function _unhideGhostForTarget() {
    if (!supportCssPointerEvents && ghostEl) {
      css(ghostEl, "display", "");
    }
  }; // #1184 fix - Prevent click event on fallback if dragged but item not changed position

if (documentExists && !ChromeForAndroid) {
  document.addEventListener(
    "click",
    function (evt) {
      if (ignoreNextClick) {
        evt.preventDefault();
        evt.stopPropagation && evt.stopPropagation();
        evt.stopImmediatePropagation && evt.stopImmediatePropagation();
        ignoreNextClick = false;
        return false;
      }
    },
    true
  );
}

var nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent(evt) {
  if (dragEl) {
    evt = evt.touches ? evt.touches[0] : evt;

    var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);

    if (nearest) {
      // Create imitation event
      var event = {};

      for (var i in evt) {
        if (evt.hasOwnProperty(i)) {
          event[i] = evt[i];
        }
      }

      event.target = event.rootEl = nearest;
      event.preventDefault = void 0;
      event.stopPropagation = void 0;

      nearest[expando]._onDragOver(event);
    }
  }
};

var _checkOutsideTargetEl = function _checkOutsideTargetEl(evt) {
  if (dragEl) {
    dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
  }
};
/**
 * @class  Sortable
 * @param  {HTMLElement}  el
 * @param  {Object}       [options]
 */

function Sortable(el, options) {
  if (!(el && el.nodeType && el.nodeType === 1)) {
    throw "Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(el));
  }

  this.el = el; // root element

  this.options = options = _extends({}, options); // Export instance

  el[expando] = this;
  var defaults = {
    group: null,
    sort: true,
    disabled: false,
    store: null,
    handle: null,
    draggable: /^[uo]l$/i.test(el.nodeName) ? ">li" : ">*",
    swapThreshold: 1,
    // percentage; 0 <= x <= 1
    invertSwap: false,
    // invert always
    invertedSwapThreshold: null,
    // will be set to same as swapThreshold if default
    removeCloneOnHide: true,
    direction: function direction() {
      return _detectDirection(el, this.options);
    },
    ghostClass: "sortable-ghost",
    chosenClass: "sortable-chosen",
    dragClass: "sortable-drag",
    ignore: "a, img",
    filter: null,
    preventOnFilter: true,
    animation: 0,
    easing: null,
    setData: function setData(dataTransfer, dragEl) {
      dataTransfer.setData("Text", dragEl.textContent);
    },
    dropBubble: false,
    dragoverBubble: false,
    dataIdAttr: "data-id",
    delay: 0,
    delayOnTouchOnly: false,
    touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,
    forceFallback: false,
    fallbackClass: "sortable-fallback",
    fallbackOnBody: false,
    fallbackTolerance: 0,
    fallbackOffset: {
      x: 0,
      y: 0,
    },
    supportPointer: Sortable.supportPointer !== false && "PointerEvent" in window && !Safari,
    emptyInsertThreshold: 5,
  };
  PluginManager.initializePlugins(this, el, defaults); // Set default options

  for (var name in defaults) {
    !(name in options) && (options[name] = defaults[name]);
  }

  _prepareGroup(options); // Bind all private methods

  for (var fn in this) {
    if (fn.charAt(0) === "_" && typeof this[fn] === "function") {
      this[fn] = this[fn].bind(this);
    }
  } // Setup drag mode

  this.nativeDraggable = options.forceFallback ? false : supportDraggable;

  if (this.nativeDraggable) {
    // Touch start threshold cannot be greater than the native dragstart threshold
    this.options.touchStartThreshold = 1;
  } // Bind events

  if (options.supportPointer) {
    on(el, "pointerdown", this._onTapStart);
  } else {
    on(el, "mousedown", this._onTapStart);
    on(el, "touchstart", this._onTapStart);
  }

  if (this.nativeDraggable) {
    on(el, "dragover", this);
    on(el, "dragenter", this);
  }

  sortables.push(this.el); // Restore sorting

  options.store && options.store.get && this.sort(options.store.get(this) || []); // Add animation state manager

  _extends(this, AnimationStateManager());
}

Sortable.prototype =
  /** @lends Sortable.prototype */
  {
    constructor: Sortable,
    _isOutsideThisEl: function _isOutsideThisEl(target) {
      if (!this.el.contains(target) && target !== this.el) {
        lastTarget = null;
      }
    },
    _getDirection: function _getDirection(evt, target) {
      return typeof this.options.direction === "function"
        ? this.options.direction.call(this, evt, target, dragEl)
        : this.options.direction;
    },
    _onTapStart: function _onTapStart(
      /** Event|TouchEvent */
      evt
    ) {
      if (!evt.cancelable) return;

      var _this = this,
        el = this.el,
        options = this.options,
        preventOnFilter = options.preventOnFilter,
        type = evt.type,
        touch = (evt.touches && evt.touches[0]) || (evt.pointerType && evt.pointerType === "touch" && evt),
        target = (touch || evt).target,
        originalTarget =
          (evt.target.shadowRoot && ((evt.path && evt.path[0]) || (evt.composedPath && evt.composedPath()[0]))) ||
          target,
        filter = options.filter;

      _saveInputCheckedState(el); // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.

      if (dragEl) {
        return;
      }

      if ((/mousedown|pointerdown/.test(type) && evt.button !== 0) || options.disabled) {
        return; // only left button and enabled
      } // cancel dnd if original target is content editable

      if (originalTarget.isContentEditable) {
        return;
      } // Safari ignores further event handling after mousedown

      if (!this.nativeDraggable && Safari && target && target.tagName.toUpperCase() === "SELECT") {
        return;
      }

      target = closest(target, options.draggable, el, false);

      if (target && target.animated) {
        return;
      }

      if (lastDownEl === target) {
        // Ignoring duplicate `down`
        return;
      } // Get the index of the dragged element within its parent

      oldIndex = index(target);
      oldDraggableIndex = index(target, options.draggable); // Check filter

      if (typeof filter === "function") {
        if (filter.call(this, evt, target, this)) {
          _dispatchEvent({
            sortable: _this,
            rootEl: originalTarget,
            name: "filter",
            targetEl: target,
            toEl: el,
            fromEl: el,
          });

          pluginEvent("filter", _this, {
            evt: evt,
          });
          preventOnFilter && evt.cancelable && evt.preventDefault();
          return; // cancel dnd
        }
      } else if (filter) {
        filter = filter.split(",").some(function (criteria) {
          criteria = closest(originalTarget, criteria.trim(), el, false);

          if (criteria) {
            _dispatchEvent({
              sortable: _this,
              rootEl: criteria,
              name: "filter",
              targetEl: target,
              fromEl: el,
              toEl: el,
            });

            pluginEvent("filter", _this, {
              evt: evt,
            });
            return true;
          }
        });

        if (filter) {
          preventOnFilter && evt.cancelable && evt.preventDefault();
          return; // cancel dnd
        }
      }

      if (options.handle && !closest(originalTarget, options.handle, el, false)) {
        return;
      } // Prepare `dragstart`

      this._prepareDragStart(evt, touch, target);
    },
    _prepareDragStart: function _prepareDragStart(
      /** Event */
      evt,
      /** Touch */
      touch,
      /** HTMLElement */
      target
    ) {
      var _this = this,
        el = _this.el,
        options = _this.options,
        ownerDocument = el.ownerDocument,
        dragStartFn;

      if (target && !dragEl && target.parentNode === el) {
        var dragRect = getRect(target);
        rootEl = el;
        dragEl = target;
        parentEl = dragEl.parentNode;
        nextEl = dragEl.nextSibling;
        lastDownEl = target;
        activeGroup = options.group;
        Sortable.dragged = dragEl;
        tapEvt = {
          target: dragEl,
          clientX: (touch || evt).clientX,
          clientY: (touch || evt).clientY,
        };
        tapDistanceLeft = tapEvt.clientX - dragRect.left;
        tapDistanceTop = tapEvt.clientY - dragRect.top;
        this._lastX = (touch || evt).clientX;
        this._lastY = (touch || evt).clientY;
        dragEl.style["will-change"] = "all";

        dragStartFn = function dragStartFn() {
          pluginEvent("delayEnded", _this, {
            evt: evt,
          });

          if (Sortable.eventCanceled) {
            _this._onDrop();

            return;
          } // Delayed drag has been triggered
          // we can re-enable the events: touchmove/mousemove

          _this._disableDelayedDragEvents();

          if (!FireFox && _this.nativeDraggable) {
            dragEl.draggable = true;
          } // Bind the events: dragstart/dragend

          _this._triggerDragStart(evt, touch); // Drag start event

          _dispatchEvent({
            sortable: _this,
            name: "choose",
            originalEvent: evt,
          }); // Chosen item

          toggleClass(dragEl, options.chosenClass, true);
        }; // Disable "draggable"

        options.ignore.split(",").forEach(function (criteria) {
          find(dragEl, criteria.trim(), _disableDraggable);
        });
        on(ownerDocument, "dragover", nearestEmptyInsertDetectEvent);
        on(ownerDocument, "mousemove", nearestEmptyInsertDetectEvent);
        on(ownerDocument, "touchmove", nearestEmptyInsertDetectEvent);
        on(ownerDocument, "mouseup", _this._onDrop);
        on(ownerDocument, "touchend", _this._onDrop);
        on(ownerDocument, "touchcancel", _this._onDrop); // Make dragEl draggable (must be before delay for FireFox)

        if (FireFox && this.nativeDraggable) {
          this.options.touchStartThreshold = 4;
          dragEl.draggable = true;
        }

        pluginEvent("delayStart", this, {
          evt: evt,
        }); // Delay is impossible for native DnD in Edge or IE

        if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {
          if (Sortable.eventCanceled) {
            this._onDrop();

            return;
          } // If the user moves the pointer or let go the click or touch
          // before the delay has been reached:
          // disable the delayed drag

          on(ownerDocument, "mouseup", _this._disableDelayedDrag);
          on(ownerDocument, "touchend", _this._disableDelayedDrag);
          on(ownerDocument, "touchcancel", _this._disableDelayedDrag);
          on(ownerDocument, "mousemove", _this._delayedDragTouchMoveHandler);
          on(ownerDocument, "touchmove", _this._delayedDragTouchMoveHandler);
          options.supportPointer && on(ownerDocument, "pointermove", _this._delayedDragTouchMoveHandler);
          _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
        } else {
          dragStartFn();
        }
      }
    },
    _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler(
      /** TouchEvent|PointerEvent **/
      e
    ) {
      var touch = e.touches ? e.touches[0] : e;

      if (
        Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >=
        Math.floor(this.options.touchStartThreshold / ((this.nativeDraggable && window.devicePixelRatio) || 1))
      ) {
        this._disableDelayedDrag();
      }
    },
    _disableDelayedDrag: function _disableDelayedDrag() {
      dragEl && _disableDraggable(dragEl);
      clearTimeout(this._dragStartTimer);

      this._disableDelayedDragEvents();
    },
    _disableDelayedDragEvents: function _disableDelayedDragEvents() {
      var ownerDocument = this.el.ownerDocument;
      off(ownerDocument, "mouseup", this._disableDelayedDrag);
      off(ownerDocument, "touchend", this._disableDelayedDrag);
      off(ownerDocument, "touchcancel", this._disableDelayedDrag);
      off(ownerDocument, "mousemove", this._delayedDragTouchMoveHandler);
      off(ownerDocument, "touchmove", this._delayedDragTouchMoveHandler);
      off(ownerDocument, "pointermove", this._delayedDragTouchMoveHandler);
    },
    _triggerDragStart: function _triggerDragStart(
      /** Event */
      evt,
      /** Touch */
      touch
    ) {
      touch = touch || (evt.pointerType == "touch" && evt);

      if (!this.nativeDraggable || touch) {
        if (this.options.supportPointer) {
          on(document, "pointermove", this._onTouchMove);
        } else if (touch) {
          on(document, "touchmove", this._onTouchMove);
        } else {
          on(document, "mousemove", this._onTouchMove);
        }
      } else {
        on(dragEl, "dragend", this);
        on(rootEl, "dragstart", this._onDragStart);
      }

      try {
        if (document.selection) {
          // Timeout neccessary for IE9
          _nextTick(function () {
            document.selection.empty();
          });
        } else {
          window.getSelection().removeAllRanges();
        }
      } catch (err) {}
    },
    _dragStarted: function _dragStarted(fallback, evt) {
      awaitingDragStarted = false;

      if (rootEl && dragEl) {
        pluginEvent("dragStarted", this, {
          evt: evt,
        });

        if (this.nativeDraggable) {
          on(document, "dragover", _checkOutsideTargetEl);
        }

        var options = this.options; // Apply effect

        !fallback && toggleClass(dragEl, options.dragClass, false);
        toggleClass(dragEl, options.ghostClass, true);
        Sortable.active = this;
        fallback && this._appendGhost(); // Drag start event

        _dispatchEvent({
          sortable: this,
          name: "start",
          originalEvent: evt,
        });
      } else {
        this._nulling();
      }
    },
    _emulateDragOver: function _emulateDragOver() {
      if (touchEvt) {
        this._lastX = touchEvt.clientX;
        this._lastY = touchEvt.clientY;

        _hideGhostForTarget();

        var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
        var parent = target;

        while (target && target.shadowRoot) {
          target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
          if (target === parent) break;
          parent = target;
        }

        dragEl.parentNode[expando]._isOutsideThisEl(target);

        if (parent) {
          do {
            if (parent[expando]) {
              var inserted = void 0;
              inserted = parent[expando]._onDragOver({
                clientX: touchEvt.clientX,
                clientY: touchEvt.clientY,
                target: target,
                rootEl: parent,
              });

              if (inserted && !this.options.dragoverBubble) {
                break;
              }
            }

            target = parent; // store last element
          } while (
            /* jshint boss:true */
            (parent = parent.parentNode)
          );
        }

        _unhideGhostForTarget();
      }
    },
    _onTouchMove: function _onTouchMove(
      /**TouchEvent*/
      evt
    ) {
      if (tapEvt) {
        var options = this.options,
          fallbackTolerance = options.fallbackTolerance,
          fallbackOffset = options.fallbackOffset,
          touch = evt.touches ? evt.touches[0] : evt,
          ghostMatrix = ghostEl && matrix(ghostEl, true),
          scaleX = ghostEl && ghostMatrix && ghostMatrix.a,
          scaleY = ghostEl && ghostMatrix && ghostMatrix.d,
          relativeScrollOffset =
            PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent),
          dx =
            (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) +
            (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1),
          dy =
            (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) +
            (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1); // only set the status to dragging, when we are actually dragging

        if (!Sortable.active && !awaitingDragStarted) {
          if (
            fallbackTolerance &&
            Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance
          ) {
            return;
          }

          this._onDragStart(evt, true);
        }

        if (ghostEl) {
          if (ghostMatrix) {
            ghostMatrix.e += dx - (lastDx || 0);
            ghostMatrix.f += dy - (lastDy || 0);
          } else {
            ghostMatrix = {
              a: 1,
              b: 0,
              c: 0,
              d: 1,
              e: dx,
              f: dy,
            };
          }

          var cssMatrix = "matrix("
            .concat(ghostMatrix.a, ",")
            .concat(ghostMatrix.b, ",")
            .concat(ghostMatrix.c, ",")
            .concat(ghostMatrix.d, ",")
            .concat(ghostMatrix.e, ",")
            .concat(ghostMatrix.f, ")");
          css(ghostEl, "webkitTransform", cssMatrix);
          css(ghostEl, "mozTransform", cssMatrix);
          css(ghostEl, "msTransform", cssMatrix);
          css(ghostEl, "transform", cssMatrix);
          lastDx = dx;
          lastDy = dy;
          touchEvt = touch;
        }

        evt.cancelable && evt.preventDefault();
      }
    },
    _appendGhost: function _appendGhost() {
      // Bug if using scale(): https://stackoverflow.com/questions/2637058
      // Not being adjusted for
      if (!ghostEl) {
        var container = this.options.fallbackOnBody ? document.body : rootEl,
          rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container),
          options = this.options; // Position absolutely

        if (PositionGhostAbsolutely) {
          // Get relatively positioned parent
          ghostRelativeParent = container;

          while (
            css(ghostRelativeParent, "position") === "static" &&
            css(ghostRelativeParent, "transform") === "none" &&
            ghostRelativeParent !== document
          ) {
            ghostRelativeParent = ghostRelativeParent.parentNode;
          }

          if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {
            if (ghostRelativeParent === document) ghostRelativeParent = getWindowScrollingElement();
            rect.top += ghostRelativeParent.scrollTop;
            rect.left += ghostRelativeParent.scrollLeft;
          } else {
            ghostRelativeParent = getWindowScrollingElement();
          }

          ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);
        }

        ghostEl = dragEl.cloneNode(true);
        toggleClass(ghostEl, options.ghostClass, false);
        toggleClass(ghostEl, options.fallbackClass, true);
        toggleClass(ghostEl, options.dragClass, true);
        css(ghostEl, "transition", "");
        css(ghostEl, "transform", "");
        css(ghostEl, "box-sizing", "border-box");
        css(ghostEl, "margin", 0);
        css(ghostEl, "top", rect.top);
        css(ghostEl, "left", rect.left);
        css(ghostEl, "width", rect.width);
        css(ghostEl, "height", rect.height);
        css(ghostEl, "opacity", "0.8");
        css(ghostEl, "position", PositionGhostAbsolutely ? "absolute" : "fixed");
        css(ghostEl, "zIndex", "100000");
        css(ghostEl, "pointerEvents", "none");
        Sortable.ghost = ghostEl;
        container.appendChild(ghostEl); // Set transform-origin

        css(
          ghostEl,
          "transform-origin",
          (tapDistanceLeft / parseInt(ghostEl.style.width)) * 100 +
            "% " +
            (tapDistanceTop / parseInt(ghostEl.style.height)) * 100 +
            "%"
        );
      }
    },
    _onDragStart: function _onDragStart(
      /**Event*/
      evt,
      /**boolean*/
      fallback
    ) {
      var _this = this;

      var dataTransfer = evt.dataTransfer;
      var options = _this.options;
      pluginEvent("dragStart", this, {
        evt: evt,
      });

      if (Sortable.eventCanceled) {
        this._onDrop();

        return;
      }

      pluginEvent("setupClone", this);

      if (!Sortable.eventCanceled) {
        cloneEl = clone(dragEl);
        cloneEl.removeAttribute("id");
        cloneEl.draggable = false;
        cloneEl.style["will-change"] = "";

        this._hideClone();

        toggleClass(cloneEl, this.options.chosenClass, false);
        Sortable.clone = cloneEl;
      } // #1143: IFrame support workaround

      _this.cloneId = _nextTick(function () {
        pluginEvent("clone", _this);
        if (Sortable.eventCanceled) return;

        if (!_this.options.removeCloneOnHide) {
          rootEl.insertBefore(cloneEl, dragEl);
        }

        _this._hideClone();

        _dispatchEvent({
          sortable: _this,
          name: "clone",
        });
      });
      !fallback && toggleClass(dragEl, options.dragClass, true); // Set proper drop events

      if (fallback) {
        ignoreNextClick = true;
        _this._loopId = setInterval(_this._emulateDragOver, 50);
      } else {
        // Undo what was set in _prepareDragStart before drag started
        off(document, "mouseup", _this._onDrop);
        off(document, "touchend", _this._onDrop);
        off(document, "touchcancel", _this._onDrop);

        if (dataTransfer) {
          dataTransfer.effectAllowed = "move";
          options.setData && options.setData.call(_this, dataTransfer, dragEl);
        }

        on(document, "drop", _this); // #1276 fix:

        css(dragEl, "transform", "translateZ(0)");
      }

      awaitingDragStarted = true;
      _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));
      on(document, "selectstart", _this);
      moved = true;

      if (Safari) {
        css(document.body, "user-select", "none");
      }
    },
    // Returns true - if no further action is needed (either inserted or another condition)
    _onDragOver: function _onDragOver(
      /**Event*/
      evt
    ) {
      var el = this.el,
        target = evt.target,
        dragRect,
        targetRect,
        revert,
        options = this.options,
        group = options.group,
        activeSortable = Sortable.active,
        isOwner = activeGroup === group,
        canSort = options.sort,
        fromSortable = putSortable || activeSortable,
        vertical,
        _this = this,
        completedFired = false;

      if (_silent) return;

      function dragOverEvent(name, extra) {
        pluginEvent(
          name,
          _this,
          _objectSpread2(
            {
              evt: evt,
              isOwner: isOwner,
              axis: vertical ? "vertical" : "horizontal",
              revert: revert,
              dragRect: dragRect,
              targetRect: targetRect,
              canSort: canSort,
              fromSortable: fromSortable,
              target: target,
              completed: completed,
              onMove: function onMove(target, after) {
                return _onMove(rootEl, el, dragEl, dragRect, target, getRect(target), evt, after);
              },
              changed: changed,
            },
            extra
          )
        );
      } // Capture animation state

      function capture() {
        dragOverEvent("dragOverAnimationCapture");

        _this.captureAnimationState();

        if (_this !== fromSortable) {
          fromSortable.captureAnimationState();
        }
      } // Return invocation when dragEl is inserted (or completed)

      function completed(insertion) {
        dragOverEvent("dragOverCompleted", {
          insertion: insertion,
        });

        if (insertion) {
          // Clones must be hidden before folding animation to capture dragRectAbsolute properly
          if (isOwner) {
            activeSortable._hideClone();
          } else {
            activeSortable._showClone(_this);
          }

          if (_this !== fromSortable) {
            // Set ghost class to new sortable's ghost class
            toggleClass(
              dragEl,
              putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass,
              false
            );
            toggleClass(dragEl, options.ghostClass, true);
          }

          if (putSortable !== _this && _this !== Sortable.active) {
            putSortable = _this;
          } else if (_this === Sortable.active && putSortable) {
            putSortable = null;
          } // Animation

          if (fromSortable === _this) {
            _this._ignoreWhileAnimating = target;
          }

          _this.animateAll(function () {
            dragOverEvent("dragOverAnimationComplete");
            _this._ignoreWhileAnimating = null;
          });

          if (_this !== fromSortable) {
            fromSortable.animateAll();
            fromSortable._ignoreWhileAnimating = null;
          }
        } // Null lastTarget if it is not inside a previously swapped element

        if ((target === dragEl && !dragEl.animated) || (target === el && !target.animated)) {
          lastTarget = null;
        } // no bubbling and not fallback

        if (!options.dragoverBubble && !evt.rootEl && target !== document) {
          dragEl.parentNode[expando]._isOutsideThisEl(evt.target); // Do not detect for empty insert if already inserted

          !insertion && nearestEmptyInsertDetectEvent(evt);
        }

        !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();
        return (completedFired = true);
      } // Call when dragEl has been inserted

      function changed() {
        newIndex = index(dragEl);
        newDraggableIndex = index(dragEl, options.draggable);

        _dispatchEvent({
          sortable: _this,
          name: "change",
          toEl: el,
          newIndex: newIndex,
          newDraggableIndex: newDraggableIndex,
          originalEvent: evt,
        });
      }

      if (evt.preventDefault !== void 0) {
        evt.cancelable && evt.preventDefault();
      }

      target = closest(target, options.draggable, el, true);
      dragOverEvent("dragOver");
      if (Sortable.eventCanceled) return completedFired;

      if (
        dragEl.contains(evt.target) ||
        (target.animated && target.animatingX && target.animatingY) ||
        _this._ignoreWhileAnimating === target
      ) {
        return completed(false);
      }

      ignoreNextClick = false;

      if (
        activeSortable &&
        !options.disabled &&
        (isOwner
          ? canSort || (revert = parentEl !== rootEl) // Reverting item into the original list
          : putSortable === this ||
            ((this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) &&
              group.checkPut(this, activeSortable, dragEl, evt)))
      ) {
        vertical = this._getDirection(evt, target) === "vertical";
        dragRect = getRect(dragEl);
        dragOverEvent("dragOverValid");
        if (Sortable.eventCanceled) return completedFired;

        if (revert) {
          parentEl = rootEl; // actualization

          capture();

          this._hideClone();

          dragOverEvent("revert");

          if (!Sortable.eventCanceled) {
            if (nextEl) {
              rootEl.insertBefore(dragEl, nextEl);
            } else {
              rootEl.appendChild(dragEl);
            }
          }

          return completed(true);
        }

        var elLastChild = lastChild(el, options.draggable);

        if (!elLastChild || (_ghostIsLast(evt, vertical, this) && !elLastChild.animated)) {
          // Insert to end of list
          // If already at end of list: Do not insert
          if (elLastChild === dragEl) {
            return completed(false);
          } // if there is a last element, it is the target

          if (elLastChild && el === evt.target) {
            target = elLastChild;
          }

          if (target) {
            targetRect = getRect(target);
          }

          if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {
            capture();

            if (elLastChild && elLastChild.nextSibling) {
              // the last draggable element is not the last node
              el.insertBefore(dragEl, elLastChild.nextSibling);
            } else {
              el.appendChild(dragEl);
            }

            parentEl = el; // actualization

            changed();
            return completed(true);
          }
        } else if (elLastChild && _ghostIsFirst(evt, vertical, this)) {
          // Insert to start of list
          var firstChild = getChild(el, 0, options, true);

          if (firstChild === dragEl) {
            return completed(false);
          }

          target = firstChild;
          targetRect = getRect(target);

          if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, false) !== false) {
            capture();
            el.insertBefore(dragEl, firstChild);
            parentEl = el; // actualization

            changed();
            return completed(true);
          }
        } else if (target.parentNode === el) {
          targetRect = getRect(target);
          var direction = 0,
            targetBeforeFirstSwap,
            differentLevel = dragEl.parentNode !== el,
            differentRowCol = !_dragElInRowColumn(
              (dragEl.animated && dragEl.toRect) || dragRect,
              (target.animated && target.toRect) || targetRect,
              vertical
            ),
            side1 = vertical ? "top" : "left",
            scrolledPastTop = isScrolledPast(target, "top", "top") || isScrolledPast(dragEl, "top", "top"),
            scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;

          if (lastTarget !== target) {
            targetBeforeFirstSwap = targetRect[side1];
            pastFirstInvertThresh = false;
            isCircumstantialInvert = (!differentRowCol && options.invertSwap) || differentLevel;
          }

          direction = _getSwapDirection(
            evt,
            target,
            targetRect,
            vertical,
            differentRowCol ? 1 : options.swapThreshold,
            options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold,
            isCircumstantialInvert,
            lastTarget === target
          );
          var sibling;

          if (direction !== 0) {
            // Check if target is beside dragEl in respective direction (ignoring hidden elements)
            var dragIndex = index(dragEl);

            do {
              dragIndex -= direction;
              sibling = parentEl.children[dragIndex];
            } while (sibling && (css(sibling, "display") === "none" || sibling === ghostEl));
          } // If dragEl is already beside target: Do not insert

          if (direction === 0 || sibling === target) {
            return completed(false);
          }

          lastTarget = target;
          lastDirection = direction;
          var nextSibling = target.nextElementSibling,
            after = false;
          after = direction === 1;

          var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);

          if (moveVector !== false) {
            if (moveVector === 1 || moveVector === -1) {
              after = moveVector === 1;
            }

            _silent = true;
            setTimeout(_unsilent, 30);
            capture();

            if (after && !nextSibling) {
              el.appendChild(dragEl);
            } else {
              target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
            } // Undo chrome's scroll adjustment (has no effect on other browsers)

            if (scrolledPastTop) {
              scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);
            }

            parentEl = dragEl.parentNode; // actualization
            // must be done before animation

            if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {
              targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);
            }

            changed();
            return completed(true);
          }
        }

        if (el.contains(dragEl)) {
          return completed(false);
        }
      }

      return false;
    },
    _ignoreWhileAnimating: null,
    _offMoveEvents: function _offMoveEvents() {
      off(document, "mousemove", this._onTouchMove);
      off(document, "touchmove", this._onTouchMove);
      off(document, "pointermove", this._onTouchMove);
      off(document, "dragover", nearestEmptyInsertDetectEvent);
      off(document, "mousemove", nearestEmptyInsertDetectEvent);
      off(document, "touchmove", nearestEmptyInsertDetectEvent);
    },
    _offUpEvents: function _offUpEvents() {
      var ownerDocument = this.el.ownerDocument;
      off(ownerDocument, "mouseup", this._onDrop);
      off(ownerDocument, "touchend", this._onDrop);
      off(ownerDocument, "pointerup", this._onDrop);
      off(ownerDocument, "touchcancel", this._onDrop);
      off(document, "selectstart", this);
    },
    _onDrop: function _onDrop(
      /**Event*/
      evt
    ) {
      var el = this.el,
        options = this.options; // Get the index of the dragged element within its parent

      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);
      pluginEvent("drop", this, {
        evt: evt,
      });
      parentEl = dragEl && dragEl.parentNode; // Get again after plugin event

      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);

      if (Sortable.eventCanceled) {
        this._nulling();

        return;
      }

      awaitingDragStarted = false;
      isCircumstantialInvert = false;
      pastFirstInvertThresh = false;
      clearInterval(this._loopId);
      clearTimeout(this._dragStartTimer);

      _cancelNextTick(this.cloneId);

      _cancelNextTick(this._dragStartId); // Unbind events

      if (this.nativeDraggable) {
        off(document, "drop", this);
        off(el, "dragstart", this._onDragStart);
      }

      this._offMoveEvents();

      this._offUpEvents();

      if (Safari) {
        css(document.body, "user-select", "");
      }

      css(dragEl, "transform", "");

      if (evt) {
        if (moved) {
          evt.cancelable && evt.preventDefault();
          !options.dropBubble && evt.stopPropagation();
        }

        ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);

        if (rootEl === parentEl || (putSortable && putSortable.lastPutMode !== "clone")) {
          // Remove clone(s)
          cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
        }

        if (dragEl) {
          if (this.nativeDraggable) {
            off(dragEl, "dragend", this);
          }

          _disableDraggable(dragEl);

          dragEl.style["will-change"] = ""; // Remove classes
          // ghostClass is added in dragStarted

          if (moved && !awaitingDragStarted) {
            toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);
          }

          toggleClass(dragEl, this.options.chosenClass, false); // Drag stop event

          _dispatchEvent({
            sortable: this,
            name: "unchoose",
            toEl: parentEl,
            newIndex: null,
            newDraggableIndex: null,
            originalEvent: evt,
          });

          if (rootEl !== parentEl) {
            if (newIndex >= 0) {
              // Add event
              _dispatchEvent({
                rootEl: parentEl,
                name: "add",
                toEl: parentEl,
                fromEl: rootEl,
                originalEvent: evt,
              }); // Remove event

              _dispatchEvent({
                sortable: this,
                name: "remove",
                toEl: parentEl,
                originalEvent: evt,
              }); // drag from one list and drop into another

              _dispatchEvent({
                rootEl: parentEl,
                name: "sort",
                toEl: parentEl,
                fromEl: rootEl,
                originalEvent: evt,
              });

              _dispatchEvent({
                sortable: this,
                name: "sort",
                toEl: parentEl,
                originalEvent: evt,
              });
            }

            putSortable && putSortable.save();
          } else {
            if (newIndex !== oldIndex) {
              if (newIndex >= 0) {
                // drag & drop within the same list
                _dispatchEvent({
                  sortable: this,
                  name: "update",
                  toEl: parentEl,
                  originalEvent: evt,
                });

                _dispatchEvent({
                  sortable: this,
                  name: "sort",
                  toEl: parentEl,
                  originalEvent: evt,
                });
              }
            }
          }

          if (Sortable.active) {
            /* jshint eqnull:true */
            if (newIndex == null || newIndex === -1) {
              newIndex = oldIndex;
              newDraggableIndex = oldDraggableIndex;
            }

            _dispatchEvent({
              sortable: this,
              name: "end",
              toEl: parentEl,
              originalEvent: evt,
            }); // Save sorting

            this.save();
          }
        }
      }

      this._nulling();
    },
    _nulling: function _nulling() {
      pluginEvent("nulling", this);
      rootEl =
        dragEl =
        parentEl =
        ghostEl =
        nextEl =
        cloneEl =
        lastDownEl =
        cloneHidden =
        tapEvt =
        touchEvt =
        moved =
        newIndex =
        newDraggableIndex =
        oldIndex =
        oldDraggableIndex =
        lastTarget =
        lastDirection =
        putSortable =
        activeGroup =
        Sortable.dragged =
        Sortable.ghost =
        Sortable.clone =
        Sortable.active =
          null;
      savedInputChecked.forEach(function (el) {
        el.checked = true;
      });
      savedInputChecked.length = lastDx = lastDy = 0;
    },
    handleEvent: function handleEvent(
      /**Event*/
      evt
    ) {
      switch (evt.type) {
        case "drop":
        case "dragend":
          this._onDrop(evt);

          break;

        case "dragenter":
        case "dragover":
          if (dragEl) {
            this._onDragOver(evt);

            _globalDragOver(evt);
          }

          break;

        case "selectstart":
          evt.preventDefault();
          break;
      }
    },

    /**
     * Serializes the item into an array of string.
     * @returns {String[]}
     */
    toArray: function toArray() {
      var order = [],
        el,
        children = this.el.children,
        i = 0,
        n = children.length,
        options = this.options;

      for (; i < n; i++) {
        el = children[i];

        if (closest(el, options.draggable, this.el, false)) {
          order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
        }
      }

      return order;
    },

    /**
     * Sorts the elements according to the array.
     * @param  {String[]}  order  order of the items
     */
    sort: function sort(order, useAnimation) {
      var items = {},
        rootEl = this.el;
      this.toArray().forEach(function (id, i) {
        var el = rootEl.children[i];

        if (closest(el, this.options.draggable, rootEl, false)) {
          items[id] = el;
        }
      }, this);
      useAnimation && this.captureAnimationState();
      order.forEach(function (id) {
        if (items[id]) {
          rootEl.removeChild(items[id]);
          rootEl.appendChild(items[id]);
        }
      });
      useAnimation && this.animateAll();
    },

    /**
     * Save the current sorting
     */
    save: function save() {
      var store = this.options.store;
      store && store.set && store.set(this);
    },

    /**
     * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
     * @param   {HTMLElement}  el
     * @param   {String}       [selector]  default: `options.draggable`
     * @returns {HTMLElement|null}
     */
    closest: function closest$1(el, selector) {
      return closest(el, selector || this.options.draggable, this.el, false);
    },

    /**
     * Set/get option
     * @param   {string} name
     * @param   {*}      [value]
     * @returns {*}
     */
    option: function option(name, value) {
      var options = this.options;

      if (value === void 0) {
        return options[name];
      } else {
        var modifiedValue = PluginManager.modifyOption(this, name, value);

        if (typeof modifiedValue !== "undefined") {
          options[name] = modifiedValue;
        } else {
          options[name] = value;
        }

        if (name === "group") {
          _prepareGroup(options);
        }
      }
    },

    /**
     * Destroy
     */
    destroy: function destroy() {
      pluginEvent("destroy", this);
      var el = this.el;
      el[expando] = null;
      off(el, "mousedown", this._onTapStart);
      off(el, "touchstart", this._onTapStart);
      off(el, "pointerdown", this._onTapStart);

      if (this.nativeDraggable) {
        off(el, "dragover", this);
        off(el, "dragenter", this);
      } // Remove draggable attributes

      Array.prototype.forEach.call(el.querySelectorAll("[draggable]"), function (el) {
        el.removeAttribute("draggable");
      });

      this._onDrop();

      this._disableDelayedDragEvents();

      sortables.splice(sortables.indexOf(this.el), 1);
      this.el = el = null;
    },
    _hideClone: function _hideClone() {
      if (!cloneHidden) {
        pluginEvent("hideClone", this);
        if (Sortable.eventCanceled) return;
        css(cloneEl, "display", "none");

        if (this.options.removeCloneOnHide && cloneEl.parentNode) {
          cloneEl.parentNode.removeChild(cloneEl);
        }

        cloneHidden = true;
      }
    },
    _showClone: function _showClone(putSortable) {
      if (putSortable.lastPutMode !== "clone") {
        this._hideClone();

        return;
      }

      if (cloneHidden) {
        pluginEvent("showClone", this);
        if (Sortable.eventCanceled) return; // show clone at dragEl or original position

        if (dragEl.parentNode == rootEl && !this.options.group.revertClone) {
          rootEl.insertBefore(cloneEl, dragEl);
        } else if (nextEl) {
          rootEl.insertBefore(cloneEl, nextEl);
        } else {
          rootEl.appendChild(cloneEl);
        }

        if (this.options.group.revertClone) {
          this.animate(dragEl, cloneEl);
        }

        css(cloneEl, "display", "");
        cloneHidden = false;
      }
    },
  };

function _globalDragOver(
  /**Event*/
  evt
) {
  if (evt.dataTransfer) {
    evt.dataTransfer.dropEffect = "move";
  }

  evt.cancelable && evt.preventDefault();
}

function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {
  var evt,
    sortable = fromEl[expando],
    onMoveFn = sortable.options.onMove,
    retVal; // Support for new CustomEvent feature

  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent("move", {
      bubbles: true,
      cancelable: true,
    });
  } else {
    evt = document.createEvent("Event");
    evt.initEvent("move", true, true);
  }

  evt.to = toEl;
  evt.from = fromEl;
  evt.dragged = dragEl;
  evt.draggedRect = dragRect;
  evt.related = targetEl || toEl;
  evt.relatedRect = targetRect || getRect(toEl);
  evt.willInsertAfter = willInsertAfter;
  evt.originalEvent = originalEvent;
  fromEl.dispatchEvent(evt);

  if (onMoveFn) {
    retVal = onMoveFn.call(sortable, evt, originalEvent);
  }

  return retVal;
}

function _disableDraggable(el) {
  el.draggable = false;
}

function _unsilent() {
  _silent = false;
}

function _ghostIsFirst(evt, vertical, sortable) {
  var rect = getRect(getChild(sortable.el, 0, sortable.options, true));
  var spacer = 10;
  return vertical
    ? evt.clientX < rect.left - spacer || (evt.clientY < rect.top && evt.clientX < rect.right)
    : evt.clientY < rect.top - spacer || (evt.clientY < rect.bottom && evt.clientX < rect.left);
}

function _ghostIsLast(evt, vertical, sortable) {
  var rect = getRect(lastChild(sortable.el, sortable.options.draggable));
  var spacer = 10;
  return vertical
    ? evt.clientX > rect.right + spacer ||
        (evt.clientX <= rect.right && evt.clientY > rect.bottom && evt.clientX >= rect.left)
    : (evt.clientX > rect.right && evt.clientY > rect.top) ||
        (evt.clientX <= rect.right && evt.clientY > rect.bottom + spacer);
}

function _getSwapDirection(
  evt,
  target,
  targetRect,
  vertical,
  swapThreshold,
  invertedSwapThreshold,
  invertSwap,
  isLastTarget
) {
  var mouseOnAxis = vertical ? evt.clientY : evt.clientX,
    targetLength = vertical ? targetRect.height : targetRect.width,
    targetS1 = vertical ? targetRect.top : targetRect.left,
    targetS2 = vertical ? targetRect.bottom : targetRect.right,
    invert = false;

  if (!invertSwap) {
    // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold
    if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {
      // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2
      // check if past first invert threshold on side opposite of lastDirection
      if (
        !pastFirstInvertThresh &&
        (lastDirection === 1
          ? mouseOnAxis > targetS1 + (targetLength * invertedSwapThreshold) / 2
          : mouseOnAxis < targetS2 - (targetLength * invertedSwapThreshold) / 2)
      ) {
        // past first invert threshold, do not restrict inverted threshold to dragEl shadow
        pastFirstInvertThresh = true;
      }

      if (!pastFirstInvertThresh) {
        // dragEl shadow (target move distance shadow)
        if (
          lastDirection === 1
            ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow
            : mouseOnAxis > targetS2 - targetMoveDistance
        ) {
          return -lastDirection;
        }
      } else {
        invert = true;
      }
    } else {
      // Regular
      if (
        mouseOnAxis > targetS1 + (targetLength * (1 - swapThreshold)) / 2 &&
        mouseOnAxis < targetS2 - (targetLength * (1 - swapThreshold)) / 2
      ) {
        return _getInsertDirection(target);
      }
    }
  }

  invert = invert || invertSwap;

  if (invert) {
    // Invert of regular
    if (
      mouseOnAxis < targetS1 + (targetLength * invertedSwapThreshold) / 2 ||
      mouseOnAxis > targetS2 - (targetLength * invertedSwapThreshold) / 2
    ) {
      return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;
    }
  }

  return 0;
}
/**
 * Gets the direction dragEl must be swapped relative to target in order to make it
 * seem that dragEl has been "inserted" into that element's position
 * @param  {HTMLElement} target       The target whose position dragEl is being inserted at
 * @return {Number}                   Direction dragEl must be swapped
 */

function _getInsertDirection(target) {
  if (index(dragEl) < index(target)) {
    return 1;
  } else {
    return -1;
  }
}
/**
 * Generate id
 * @param   {HTMLElement} el
 * @returns {String}
 * @private
 */

function _generateId(el) {
  var str = el.tagName + el.className + el.src + el.href + el.textContent,
    i = str.length,
    sum = 0;

  while (i--) {
    sum += str.charCodeAt(i);
  }

  return sum.toString(36);
}

function _saveInputCheckedState(root) {
  savedInputChecked.length = 0;
  var inputs = root.getElementsByTagName("input");
  var idx = inputs.length;

  while (idx--) {
    var el = inputs[idx];
    el.checked && savedInputChecked.push(el);
  }
}

function _nextTick(fn) {
  return setTimeout(fn, 0);
}

function _cancelNextTick(id) {
  return clearTimeout(id);
} // Fixed #973:

if (documentExists) {
  on(document, "touchmove", function (evt) {
    if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {
      evt.preventDefault();
    }
  });
} // Export utils

Sortable.utils = {
  on: on,
  off: off,
  css: css,
  find: find,
  is: function is(el, selector) {
    return !!closest(el, selector, el, false);
  },
  extend: extend,
  throttle: throttle,
  closest: closest,
  toggleClass: toggleClass,
  clone: clone,
  index: index,
  nextTick: _nextTick,
  cancelNextTick: _cancelNextTick,
  detectDirection: _detectDirection,
  getChild: getChild,
};
/**
 * Get the Sortable instance of an element
 * @param  {HTMLElement} element The element
 * @return {Sortable|undefined}         The instance of Sortable
 */

Sortable.get = function (element) {
  return element[expando];
};
/**
 * Mount a plugin to Sortable
 * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted
 */

Sortable.mount = function () {
  for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
    plugins[_key] = arguments[_key];
  }

  if (plugins[0].constructor === Array) plugins = plugins[0];
  plugins.forEach(function (plugin) {
    if (!plugin.prototype || !plugin.prototype.constructor) {
      throw "Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(plugin));
    }

    if (plugin.utils) Sortable.utils = _objectSpread2(_objectSpread2({}, Sortable.utils), plugin.utils);
    PluginManager.mount(plugin);
  });
};
/**
 * Create sortable instance
 * @param {HTMLElement}  el
 * @param {Object}      [options]
 */

Sortable.create = function (el, options) {
  return new Sortable(el, options);
}; // Export

Sortable.version = version;

var autoScrolls = [],
  scrollEl,
  scrollRootEl,
  scrolling = false,
  lastAutoScrollX,
  lastAutoScrollY,
  touchEvt$1,
  pointerElemChangedInterval;

function AutoScrollPlugin() {
  function AutoScroll() {
    this.defaults = {
      scroll: true,
      forceAutoScrollFallback: false,
      scrollSensitivity: 30,
      scrollSpeed: 10,
      bubbleScroll: true,
    }; // Bind all private methods

    for (var fn in this) {
      if (fn.charAt(0) === "_" && typeof this[fn] === "function") {
        this[fn] = this[fn].bind(this);
      }
    }
  }

  AutoScroll.prototype = {
    dragStarted: function dragStarted(_ref) {
      var originalEvent = _ref.originalEvent;

      if (this.sortable.nativeDraggable) {
        on(document, "dragover", this._handleAutoScroll);
      } else {
        if (this.options.supportPointer) {
          on(document, "pointermove", this._handleFallbackAutoScroll);
        } else if (originalEvent.touches) {
          on(document, "touchmove", this._handleFallbackAutoScroll);
        } else {
          on(document, "mousemove", this._handleFallbackAutoScroll);
        }
      }
    },
    dragOverCompleted: function dragOverCompleted(_ref2) {
      var originalEvent = _ref2.originalEvent;

      // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)
      if (!this.options.dragOverBubble && !originalEvent.rootEl) {
        this._handleAutoScroll(originalEvent);
      }
    },
    drop: function drop() {
      if (this.sortable.nativeDraggable) {
        off(document, "dragover", this._handleAutoScroll);
      } else {
        off(document, "pointermove", this._handleFallbackAutoScroll);
        off(document, "touchmove", this._handleFallbackAutoScroll);
        off(document, "mousemove", this._handleFallbackAutoScroll);
      }

      clearPointerElemChangedInterval();
      clearAutoScrolls();
      cancelThrottle();
    },
    nulling: function nulling() {
      touchEvt$1 =
        scrollRootEl =
        scrollEl =
        scrolling =
        pointerElemChangedInterval =
        lastAutoScrollX =
        lastAutoScrollY =
          null;
      autoScrolls.length = 0;
    },
    _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {
      this._handleAutoScroll(evt, true);
    },
    _handleAutoScroll: function _handleAutoScroll(evt, fallback) {
      var _this = this;

      var x = (evt.touches ? evt.touches[0] : evt).clientX,
        y = (evt.touches ? evt.touches[0] : evt).clientY,
        elem = document.elementFromPoint(x, y);
      touchEvt$1 = evt; // IE does not seem to have native autoscroll,
      // Edge's autoscroll seems too conditional,
      // MACOS Safari does not have autoscroll,
      // Firefox and Chrome are good

      if (fallback || this.options.forceAutoScrollFallback || Edge || IE11OrLess || Safari) {
        autoScroll(evt, this.options, elem, fallback); // Listener for pointer element change

        var ogElemScroller = getParentAutoScrollElement(elem, true);

        if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {
          pointerElemChangedInterval && clearPointerElemChangedInterval(); // Detect for pointer elem change, emulating native DnD behaviour

          pointerElemChangedInterval = setInterval(function () {
            var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);

            if (newElem !== ogElemScroller) {
              ogElemScroller = newElem;
              clearAutoScrolls();
            }

            autoScroll(evt, _this.options, newElem, fallback);
          }, 10);
          lastAutoScrollX = x;
          lastAutoScrollY = y;
        }
      } else {
        // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll
        if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {
          clearAutoScrolls();
          return;
        }

        autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);
      }
    },
  };
  return _extends(AutoScroll, {
    pluginName: "scroll",
    initializeByDefault: true,
  });
}

function clearAutoScrolls() {
  autoScrolls.forEach(function (autoScroll) {
    clearInterval(autoScroll.pid);
  });
  autoScrolls = [];
}

function clearPointerElemChangedInterval() {
  clearInterval(pointerElemChangedInterval);
}

var autoScroll = throttle(function (evt, options, rootEl, isFallback) {
  // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
  if (!options.scroll) return;
  var x = (evt.touches ? evt.touches[0] : evt).clientX,
    y = (evt.touches ? evt.touches[0] : evt).clientY,
    sens = options.scrollSensitivity,
    speed = options.scrollSpeed,
    winScroller = getWindowScrollingElement();
  var scrollThisInstance = false,
    scrollCustomFn; // New scroll root, set scrollEl

  if (scrollRootEl !== rootEl) {
    scrollRootEl = rootEl;
    clearAutoScrolls();
    scrollEl = options.scroll;
    scrollCustomFn = options.scrollFn;

    if (scrollEl === true) {
      scrollEl = getParentAutoScrollElement(rootEl, true);
    }
  }

  var layersOut = 0;
  var currentParent = scrollEl;

  do {
    var el = currentParent,
      rect = getRect(el),
      top = rect.top,
      bottom = rect.bottom,
      left = rect.left,
      right = rect.right,
      width = rect.width,
      height = rect.height,
      canScrollX = void 0,
      canScrollY = void 0,
      scrollWidth = el.scrollWidth,
      scrollHeight = el.scrollHeight,
      elCSS = css(el),
      scrollPosX = el.scrollLeft,
      scrollPosY = el.scrollTop;

    if (el === winScroller) {
      canScrollX =
        width < scrollWidth &&
        (elCSS.overflowX === "auto" || elCSS.overflowX === "scroll" || elCSS.overflowX === "visible");
      canScrollY =
        height < scrollHeight &&
        (elCSS.overflowY === "auto" || elCSS.overflowY === "scroll" || elCSS.overflowY === "visible");
    } else {
      canScrollX = width < scrollWidth && (elCSS.overflowX === "auto" || elCSS.overflowX === "scroll");
      canScrollY = height < scrollHeight && (elCSS.overflowY === "auto" || elCSS.overflowY === "scroll");
    }

    var vx =
      canScrollX &&
      (Math.abs(right - x) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - x) <= sens && !!scrollPosX);
    var vy =
      canScrollY &&
      (Math.abs(bottom - y) <= sens && scrollPosY + height < scrollHeight) -
        (Math.abs(top - y) <= sens && !!scrollPosY);

    if (!autoScrolls[layersOut]) {
      for (var i = 0; i <= layersOut; i++) {
        if (!autoScrolls[i]) {
          autoScrolls[i] = {};
        }
      }
    }

    if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {
      autoScrolls[layersOut].el = el;
      autoScrolls[layersOut].vx = vx;
      autoScrolls[layersOut].vy = vy;
      clearInterval(autoScrolls[layersOut].pid);

      if (vx != 0 || vy != 0) {
        scrollThisInstance = true;
        /* jshint loopfunc:true */

        autoScrolls[layersOut].pid = setInterval(
          function () {
            // emulate drag over during autoscroll (fallback), emulating native DnD behaviour
            if (isFallback && this.layer === 0) {
              Sortable.active._onTouchMove(touchEvt$1); // To move ghost if it is positioned absolutely
            }

            var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;
            var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;

            if (typeof scrollCustomFn === "function") {
              if (
                scrollCustomFn.call(
                  Sortable.dragged.parentNode[expando],
                  scrollOffsetX,
                  scrollOffsetY,
                  evt,
                  touchEvt$1,
                  autoScrolls[this.layer].el
                ) !== "continue"
              ) {
                return;
              }
            }

            scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);
          }.bind({
            layer: layersOut,
          }),
          24
        );
      }
    }

    layersOut++;
  } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));

  scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not
}, 30);

var drop = function drop(_ref) {
  var originalEvent = _ref.originalEvent,
    putSortable = _ref.putSortable,
    dragEl = _ref.dragEl,
    activeSortable = _ref.activeSortable,
    dispatchSortableEvent = _ref.dispatchSortableEvent,
    hideGhostForTarget = _ref.hideGhostForTarget,
    unhideGhostForTarget = _ref.unhideGhostForTarget;
  if (!originalEvent) return;
  var toSortable = putSortable || activeSortable;
  hideGhostForTarget();
  var touch =
    originalEvent.changedTouches && originalEvent.changedTouches.length
      ? originalEvent.changedTouches[0]
      : originalEvent;
  var target = document.elementFromPoint(touch.clientX, touch.clientY);
  unhideGhostForTarget();

  if (toSortable && !toSortable.el.contains(target)) {
    dispatchSortableEvent("spill");
    this.onSpill({
      dragEl: dragEl,
      putSortable: putSortable,
    });
  }
};

function Revert() {}

Revert.prototype = {
  startIndex: null,
  dragStart: function dragStart(_ref2) {
    var oldDraggableIndex = _ref2.oldDraggableIndex;
    this.startIndex = oldDraggableIndex;
  },
  onSpill: function onSpill(_ref3) {
    var dragEl = _ref3.dragEl,
      putSortable = _ref3.putSortable;
    this.sortable.captureAnimationState();

    if (putSortable) {
      putSortable.captureAnimationState();
    }

    var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);

    if (nextSibling) {
      this.sortable.el.insertBefore(dragEl, nextSibling);
    } else {
      this.sortable.el.appendChild(dragEl);
    }

    this.sortable.animateAll();

    if (putSortable) {
      putSortable.animateAll();
    }
  },
  drop: drop,
};

_extends(Revert, {
  pluginName: "revertOnSpill",
});

function Remove() {}

Remove.prototype = {
  onSpill: function onSpill(_ref4) {
    var dragEl = _ref4.dragEl,
      putSortable = _ref4.putSortable;
    var parentSortable = putSortable || this.sortable;
    parentSortable.captureAnimationState();
    dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);
    parentSortable.animateAll();
  },
  drop: drop,
};

_extends(Remove, {
  pluginName: "removeOnSpill",
});

Sortable.mount(new AutoScrollPlugin());
Sortable.mount(Remove, Revert);

const HIGHLIGHTER_STYLES = ["none", "lowlight", "floating", "rounded", "realistic"];
const HIGHLIGHTER_METHODS = ["css-classes", "inline-styles"];
const DEFAULT_SETTINGS = {
  highlighterStyle: "none",
  highlighterMethods: "inline-styles",
  highlighters: {
    Pink: "#FFB8EBA6",
    Red: "#FF5582A6",
    Orange: "#FFB86CA6",
    Yellow: "#FFF3A3A6",
    Green: "#BBFABBA6",
    Cyan: "#ABF7F7A6",
    Blue: "#ADCCFFA6",
    Purple: "#D2B3FFA6",
    Grey: "#CACFD9A6",
  },
  highlighterOrder: [],
};
DEFAULT_SETTINGS.highlighterOrder = Object.keys(DEFAULT_SETTINGS.highlighters);

function setAttributes(element, attributes) {
  for (let key in attributes) {
    element.setAttribute(key, attributes[key]);
  }
}

class HighlightrSettingTab extends obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Highlightr" });
    containerEl.createEl("p", { text: "Created by " }).createEl("a", {
      text: "Chetachi 👩🏽‍💻",
      href: "https://github.com/chetachiezikeuzor",
    });
    containerEl.createEl("h2", { text: "Plugin Settings" });
    new obsidian.Setting(containerEl)
      .setName("Choose highlight method")
      .setDesc(
        `Choose between highlighting with inline CSS or CSS classes. Please note that there are pros and cons to both choices. Inline CSS will keep you from being reliant on external CSS files if you choose to export your notes. CSS classes are more flexible and easier to customize.`
      )
      .addDropdown((dropdown) => {
        let methods = {};
        HIGHLIGHTER_METHODS.map((method) => (methods[method] = method));
        dropdown.addOptions(methods);
        dropdown.setValue(this.plugin.settings.highlighterMethods).onChange((highlightrMethod) => {
          this.plugin.settings.highlighterMethods = highlightrMethod;
          setTimeout(() => {
            dispatchEvent(new Event("Highlightr-NewCommand"));
          }, 100);
          this.plugin.saveSettings();
          this.plugin.saveData(this.plugin.settings);
          this.display();
        });
      });
    const stylesSetting = new obsidian.Setting(containerEl);
    stylesSetting
      .setName("Choose highlight style")
      .setDesc(
        `Depending on your design aesthetic, you may want to customize the style of your highlights. Choose from an assortment of different highlighter styles by using the dropdown. Depending on your theme, this plugin's CSS may be overriden.`
      )
      .addDropdown((dropdown) => {
        let styles = {};
        HIGHLIGHTER_STYLES.map((style) => (styles[style] = style));
        dropdown.addOptions(styles);
        dropdown.setValue(this.plugin.settings.highlighterStyle).onChange((highlighterStyle) => {
          this.plugin.settings.highlighterStyle = highlighterStyle;
          this.plugin.saveSettings();
          this.plugin.saveData(this.plugin.settings);
          this.plugin.refresh();
        });
      });
    const styleDemo = () => {
      const d = createEl("p");
      d.setAttribute("style", "font-size: .925em; margin-top: 12px;");
      d.innerHTML = `
      <span style="background:#FFB7EACC;padding: .125em .125em;--lowlight-background: var(--background-primary);border-radius: 0;background-image: linear-gradient(360deg,rgba(255, 255, 255, 0) 40%,var(--lowlight-background) 40%) !important;">Lowlight</span> 
      <span style="background:#93C0FFCC;--floating-background: var(--background-primary);border-radius: 0;padding-bottom: 5px;background-image: linear-gradient(360deg,rgba(255, 255, 255, 0) 28%,var(--floating-background) 28%) !important;">Floating</span> 
      <span style="background:#9CF09CCC;margin: 0 -0.05em;padding: 0.1em 0.4em;border-radius: 0.8em 0.3em;-webkit-box-decoration-break: clone;box-decoration-break: clone;text-shadow: 0 0 0.75em var(--background-primary-alt);">Realistic</span> 
      <span style="background:#CCA9FFCC;margin: 0 -0.05em;padding: 0.125em 0.15em;border-radius: 0.2em;-webkit-box-decoration-break: clone;box-decoration-break: clone;">Rounded</span>`;
      return d;
    };
    stylesSetting.infoEl.appendChild(styleDemo());
    const highlighterSetting = new obsidian.Setting(containerEl);
    highlighterSetting
      .setName("Choose highlight colors")
      .setClass("highlighterplugin-setting-item")
      .setDesc(
        `Create new highlight colors by providing a color name and using the color picker to set the hex code value. Don't forget to save the color before exiting the color picker. Drag and drop the highlight color to change the order for your highlighter component.`
      );
    const colorInput = new obsidian.TextComponent(highlighterSetting.controlEl);
    colorInput.setPlaceholder("Color name");
    colorInput.inputEl.addClass("highlighter-settings-color");
    const valueInput = new obsidian.TextComponent(highlighterSetting.controlEl);
    valueInput.setPlaceholder("Color hex code");
    valueInput.inputEl.addClass("highlighter-settings-value");
    highlighterSetting
      .addButton((button) => {
        button.setClass("highlightr-color-picker");
      })
      .then(() => {
        let input = valueInput.inputEl;
        valueInput.inputEl.value || null;
        const colorMap = this.plugin.settings.highlighterOrder.map(
          (highlightKey) => this.plugin.settings.highlighters[highlightKey]
        );
        let colorHex;
        let pickrCreate = new Pickr({
          el: ".highlightr-color-picker",
          theme: "nano",
          swatches: colorMap,
          defaultRepresentation: "HEXA",
          default: colorMap[colorMap.length - 1],
          comparison: false,
          components: {
            preview: true,
            opacity: true,
            hue: true,
            interaction: {
              hex: true,
              rgba: true,
              hsla: false,
              hsva: false,
              cmyk: false,
              input: true,
              clear: true,
              cancel: true,
              save: true,
            },
          },
        });
        pickrCreate
          .on("clear", function (instance) {
            instance.hide();
            input.trigger("change");
          })
          .on("cancel", function (instance) {
            instance.getSelectedColor().toHEXA().toString();
            input.trigger("change");
            instance.hide();
          })
          .on("change", function (color) {
            colorHex = color.toHEXA().toString();
            let newColor;
            colorHex.length == 6
              ? (newColor = `${color.toHEXA().toString()}A6`)
              : (newColor = color.toHEXA().toString());
            colorInput.inputEl.setAttribute("style", `background-color: ${newColor}; color: var(--text-normal);`);
            setAttributes(input, {
              value: newColor,
              style: `background-color: ${newColor}; color: var(--text-normal);`,
            });
            input.setText(newColor);
            input.textContent = newColor;
            input.value = newColor;
            input.trigger("change");
          })
          .on("save", function (color, instance) {
            let newColorValue = color.toHEXA().toString();
            input.setText(newColorValue);
            input.textContent = newColorValue;
            input.value = newColorValue;
            input.trigger("change");
            instance.hide();
            instance.addSwatch(color.toHEXA().toString());
          });
      })
      .addButton((button) => {
        button
          .setClass("HighlightrSettingsButton")
          .setClass("HighlightrSettingsButtonAdd")
          .setIcon("highlightr-save")
          .setTooltip("Save")
          .onClick((buttonEl) =>
            __awaiter(this, void 0, void 0, function* () {
              let color = colorInput.inputEl.value.replace(" ", "-");
              let value = valueInput.inputEl.value;
              if (color && value) {
                if (!this.plugin.settings.highlighterOrder.includes(color)) {
                  this.plugin.settings.highlighterOrder.push(color);
                  this.plugin.settings.highlighters[color] = value;
                  setTimeout(() => {
                    dispatchEvent(new Event("Highlightr-NewCommand"));
                  }, 100);
                  yield this.plugin.saveSettings();
                  this.display();
                } else {
                  buttonEl.stopImmediatePropagation();
                  new obsidian.Notice("This color already exists");
                }
              }
              color && !value
                ? new obsidian.Notice("Highlighter hex code missing")
                : !color && value
                ? new obsidian.Notice("Highlighter name missing")
                : new obsidian.Notice("Highlighter values missing"); // else
            })
          );
      });
    const highlightersContainer = containerEl.createEl("div", {
      cls: "HighlightrSettingsTabsContainer",
    });
    Sortable.create(highlightersContainer, {
      animation: 500,
      ghostClass: "highlighter-sortable-ghost",
      chosenClass: "highlighter-sortable-chosen",
      dragClass: "highlighter-sortable-drag",
      dragoverBubble: true,
      forceFallback: true,
      fallbackClass: "highlighter-sortable-fallback",
      easing: "cubic-bezier(1, 0, 0, 1)",
      onSort: (command) => {
        const arrayResult = this.plugin.settings.highlighterOrder;
        const [removed] = arrayResult.splice(command.oldIndex, 1);
        arrayResult.splice(command.newIndex, 0, removed);
        this.plugin.settings.highlighterOrder = arrayResult;
        this.plugin.saveSettings();
      },
    });
    this.plugin.settings.highlighterOrder.forEach((highlighter) => {
      const icon = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill=${this.plugin.settings.highlighters[highlighter]} stroke=${this.plugin.settings.highlighters[highlighter]} stroke-width="0" stroke-linecap="round" stroke-linejoin="round"><path d="M20.707 5.826l-3.535-3.533a.999.999 0 0 0-1.408-.006L7.096 10.82a1.01 1.01 0 0 0-.273.488l-1.024 4.437L4 18h2.828l1.142-1.129l3.588-.828c.18-.042.345-.133.477-.262l8.667-8.535a1 1 0 0 0 .005-1.42zm-9.369 7.833l-2.121-2.12l7.243-7.131l2.12 2.12l-7.242 7.131zM4 20h16v2H4z"/></svg>`;
      const settingItem = highlightersContainer.createEl("div");
      settingItem.addClass("highlighter-item-draggable");
      const colorIcon = settingItem.createEl("span");
      colorIcon.addClass("highlighter-setting-icon");
      colorIcon.innerHTML = icon;
      new obsidian.Setting(settingItem)
        .setClass("highlighter-setting-item")
        .setName(highlighter)
        .setDesc(this.plugin.settings.highlighters[highlighter])
        .addButton((button) => {
          button
            .setClass("HighlightrSettingsButton")
            .setClass("HighlightrSettingsButtonDelete")
            .setIcon("highlightr-delete")
            .setTooltip("Remove")
            .onClick(() =>
              __awaiter(this, void 0, void 0, function* () {
                new obsidian.Notice(`${highlighter} highlight deleted`);
                this.app.commands.removeCommand(`highlightr-plugin:${highlighter}`);
                delete this.plugin.settings.highlighters[highlighter];
                this.plugin.settings.highlighterOrder.remove(highlighter);
                setTimeout(() => {
                  dispatchEvent(new Event("Highlightr-NewCommand"));
                }, 100);
                yield this.plugin.saveSettings();
                this.display();
              })
            );
        });
      const a = createEl("a");
      a.setAttribute("href", "");
    });
    const hltrDonationDiv = containerEl.createEl("div", {
      cls: "hltrDonationSection",
    });
    const donateText = createEl("p");
    donateText.appendText(
      "If you like this Plugin and are considering donating to support continued development, use the buttons below!"
    );
    hltrDonationDiv.appendChild(donateText);
    hltrDonationDiv.appendChild(paypalButton("https://paypal.me/chelseaezikeuzor"));
    hltrDonationDiv.appendChild(buyMeACoffeeButton("https://www.buymeacoffee.com/chetachi"));
    hltrDonationDiv.appendChild(kofiButton("https://ko-fi.com/chetachi"));
  }
}
const buyMeACoffeeButton = (link) => {
  const a = createEl("a");
  a.setAttribute("href", link);
  a.addClass("buymeacoffee-chetachi-img");
  a.innerHTML = `<img src="https://img.buymeacoffee.com/button-api/?text=Buy me a coffee&emoji=&slug=chetachi&button_colour=e3e7ef&font_colour=262626&font_family=Poppins&outline_colour=262626&coffee_colour=ff0000" height="42px"> `;
  return a;
};
const paypalButton = (link) => {
  const a = createEl("a");
  a.setAttribute("href", link);
  a.addClass("buymeacoffee-chetachi-img");
  a.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="150" height="40">
  <path fill="#253B80" d="M46.211 6.749h-6.839a.95.95 0 0 0-.939.802l-2.766 17.537a.57.57 0 0 0 .564.658h3.265a.95.95 0 0 0 .939-.803l.746-4.73a.95.95 0 0 1 .938-.803h2.165c4.505 0 7.105-2.18 7.784-6.5.306-1.89.013-3.375-.872-4.415-.972-1.142-2.696-1.746-4.985-1.746zM47 13.154c-.374 2.454-2.249 2.454-4.062 2.454h-1.032l.724-4.583a.57.57 0 0 1 .563-.481h.473c1.235 0 2.4 0 3.002.704.359.42.469 1.044.332 1.906zM66.654 13.075h-3.275a.57.57 0 0 0-.563.481l-.145.916-.229-.332c-.709-1.029-2.29-1.373-3.868-1.373-3.619 0-6.71 2.741-7.312 6.586-.313 1.918.132 3.752 1.22 5.031.998 1.176 2.426 1.666 4.125 1.666 2.916 0 4.533-1.875 4.533-1.875l-.146.91a.57.57 0 0 0 .562.66h2.95a.95.95 0 0 0 .939-.803l1.77-11.209a.568.568 0 0 0-.561-.658zm-4.565 6.374c-.316 1.871-1.801 3.127-3.695 3.127-.951 0-1.711-.305-2.199-.883-.484-.574-.668-1.391-.514-2.301.295-1.855 1.805-3.152 3.67-3.152.93 0 1.686.309 2.184.892.499.589.697 1.411.554 2.317zM84.096 13.075h-3.291a.954.954 0 0 0-.787.417l-4.539 6.686-1.924-6.425a.953.953 0 0 0-.912-.678h-3.234a.57.57 0 0 0-.541.754l3.625 10.638-3.408 4.811a.57.57 0 0 0 .465.9h3.287a.949.949 0 0 0 .781-.408l10.946-15.8a.57.57 0 0 0-.468-.895z"></path>
  <path fill="#179BD7" d="M94.992 6.749h-6.84a.95.95 0 0 0-.938.802l-2.766 17.537a.569.569 0 0 0 .562.658h3.51a.665.665 0 0 0 .656-.562l.785-4.971a.95.95 0 0 1 .938-.803h2.164c4.506 0 7.105-2.18 7.785-6.5.307-1.89.012-3.375-.873-4.415-.971-1.142-2.694-1.746-4.983-1.746zm.789 6.405c-.373 2.454-2.248 2.454-4.062 2.454h-1.031l.725-4.583a.568.568 0 0 1 .562-.481h.473c1.234 0 2.4 0 3.002.704.359.42.468 1.044.331 1.906zM115.434 13.075h-3.273a.567.567 0 0 0-.562.481l-.145.916-.23-.332c-.709-1.029-2.289-1.373-3.867-1.373-3.619 0-6.709 2.741-7.311 6.586-.312 1.918.131 3.752 1.219 5.031 1 1.176 2.426 1.666 4.125 1.666 2.916 0 4.533-1.875 4.533-1.875l-.146.91a.57.57 0 0 0 .564.66h2.949a.95.95 0 0 0 .938-.803l1.771-11.209a.571.571 0 0 0-.565-.658zm-4.565 6.374c-.314 1.871-1.801 3.127-3.695 3.127-.949 0-1.711-.305-2.199-.883-.484-.574-.666-1.391-.514-2.301.297-1.855 1.805-3.152 3.67-3.152.93 0 1.686.309 2.184.892.501.589.699 1.411.554 2.317zM119.295 7.23l-2.807 17.858a.569.569 0 0 0 .562.658h2.822c.469 0 .867-.34.939-.803l2.768-17.536a.57.57 0 0 0-.562-.659h-3.16a.571.571 0 0 0-.562.482z"></path>
  <path fill="#253B80" d="M7.266 29.154l.523-3.322-1.165-.027H1.061L4.927 1.292a.316.316 0 0 1 .314-.268h9.38c3.114 0 5.263.648 6.385 1.927.526.6.861 1.227 1.023 1.917.17.724.173 1.589.007 2.644l-.012.077v.676l.526.298a3.69 3.69 0 0 1 1.065.812c.45.513.741 1.165.864 1.938.127.795.085 1.741-.123 2.812-.24 1.232-.628 2.305-1.152 3.183a6.547 6.547 0 0 1-1.825 2c-.696.494-1.523.869-2.458 1.109-.906.236-1.939.355-3.072.355h-.73c-.522 0-1.029.188-1.427.525a2.21 2.21 0 0 0-.744 1.328l-.055.299-.924 5.855-.042.215c-.011.068-.03.102-.058.125a.155.155 0 0 1-.096.035H7.266z"></path>
  <path fill="#179BD7" d="M23.048 7.667c-.028.179-.06.362-.096.55-1.237 6.351-5.469 8.545-10.874 8.545H9.326c-.661 0-1.218.48-1.321 1.132L6.596 26.83l-.399 2.533a.704.704 0 0 0 .695.814h4.881c.578 0 1.069-.42 1.16-.99l.048-.248.919-5.832.059-.32c.09-.572.582-.992 1.16-.992h.73c4.729 0 8.431-1.92 9.513-7.476.452-2.321.218-4.259-.978-5.622a4.667 4.667 0 0 0-1.336-1.03z"></path>
  <path fill="#222D65" d="M21.754 7.151a9.757 9.757 0 0 0-1.203-.267 15.284 15.284 0 0 0-2.426-.177h-7.352a1.172 1.172 0 0 0-1.159.992L8.05 17.605l-.045.289a1.336 1.336 0 0 1 1.321-1.132h2.752c5.405 0 9.637-2.195 10.874-8.545.037-.188.068-.371.096-.55a6.594 6.594 0 0 0-1.017-.429 9.045 9.045 0 0 0-.277-.087z"></path>
  <path fill="#253B80" d="M9.614 7.699a1.169 1.169 0 0 1 1.159-.991h7.352c.871 0 1.684.057 2.426.177a9.757 9.757 0 0 1 1.481.353c.365.121.704.264 1.017.429.368-2.347-.003-3.945-1.272-5.392C20.378.682 17.853 0 14.622 0h-9.38c-.66 0-1.223.48-1.325 1.133L.01 25.898a.806.806 0 0 0 .795.932h5.791l1.454-9.225 1.564-9.906z"></path>
  </svg>`;
  return a;
};
const kofiButton = (link) => {
  const a = createEl("a");
  a.setAttribute("href", link);
  a.addClass("buymeacoffee-chetachi-img");
  a.innerHTML = `<img src="https://raw.githubusercontent.com/chetachiezikeuzor/Highlightr-Plugin/master/assets/kofi_color.svg" height="50">`;
  return a;
};

const highlighterMenu = (app, settings, editor) => {
  var _a, _b, _c;
  if (editor && editor.hasFocus()) {
    const cursor = editor.getCursor("from");
    let coords;
    const menu = new obsidian.Menu();
    // menu.setUseNativeMenu(false);
    const menuDom = menu.dom;
    menuDom.addClass("highlighterContainer");
    settings.highlighterOrder.forEach((highlighter) => {
      menu.addItem((highlighterItem) => {
        highlighterItem.setTitle(highlighter);
        highlighterItem.setIcon(`highlightr-pen-${highlighter}`.toLowerCase());
        highlighterItem.onClick(() => {
          app.commands.executeCommandById(`highlightr-plugin:${highlighter}`);
        });
      });
    });
    if (editor.cursorCoords) {
      coords = editor.cursorCoords(true, "window");
    } else if (editor.coordsAtPos) {
      const offset = editor.posToOffset(cursor);
      coords =
        (_c = (_b = (_a = editor.cm).coordsAtPos) === null || _b === void 0 ? void 0 : _b.call(_a, offset)) !== null &&
        _c !== void 0
          ? _c
          : editor.coordsAtPos(offset);
    } else {
      return;
    }
    menu.showAtPosition({
      x: coords.right + 25,
      y: coords.top + 20,
    });
  } else {
    new obsidian.Notice("Focus must be in editor");
  }
};

function contextMenu(app, menu, editor, plugin, settings) {
  const selection = editor.getSelection();
  menu.addItem((item) => {
    const itemDom = item.dom;
    itemDom.addClass("highlighter-button");
    item
      .setTitle("Highlight")
      .setIcon("highlightr-pen")
      .onClick((e) =>
        __awaiter(this, void 0, void 0, function* () {
          highlighterMenu(app, settings, editor);
        })
      );
  });
  if (selection) {
    menu.addItem((item) => {
      item
        .setTitle("Erase highlight")
        .setIcon("highlightr-eraser")
        .onClick((e) => {
          if (editor.getSelection()) {
            plugin.eraseHighlight(editor);
          }
        });
    });
  }
}

function addNewStyle(selector, style, sheet) {
  sheet.textContent += selector + `{\n ${style}\n}\n\n`;
}
function createStyles(settings) {
  let styleSheet = document.createElement("style");
  setAttributes(styleSheet, {
    type: "text/css",
    id: "highlightr-styles",
  });
  let header = document.getElementsByTagName("HEAD")[0];
  header.appendChild(styleSheet);
  Object.keys(settings.highlighters).forEach((highlighter) => {
    let colorLowercase = highlighter.toLowerCase();
    addNewStyle(
      `.hltr-${colorLowercase},\nmark.hltr-${colorLowercase},\n.markdown-preview-view mark.hltr-${colorLowercase}`,
      `background: ${settings.highlighters[highlighter]};`,
      styleSheet
    );
  });
}

class HighlightrPlugin extends obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.eraseHighlight = (editor) => {
      const currentStr = editor.getSelection();
      const newStr = currentStr
        .replace(/\<mark style.*?[^\>]\>/g, "")
        .replace(/\<mark class.*?[^\>]\>/g, "")
        .replace(/\<\/mark>/g, "");
      editor.replaceSelection(newStr);
      editor.focus();
    };
    this.refresh = () => {
      this.updateStyle();
    };
    this.updateStyle = () => {
      document.body.classList.toggle("highlightr-lowlight", this.settings.highlighterStyle === "lowlight");
      document.body.classList.toggle("highlightr-floating", this.settings.highlighterStyle === "floating");
      document.body.classList.toggle("highlightr-rounded", this.settings.highlighterStyle === "rounded");
      document.body.classList.toggle("highlightr-realistic", this.settings.highlighterStyle === "realistic");
    };
    this.handleHighlighterInContextMenu = (menu, editor) => {
      contextMenu(this.app, menu, editor, this, this.settings);
    };
  }
  onload() {
    return __awaiter(this, void 0, void 0, function* () {
      console.log(`Highlightr v${this.manifest.version} loaded`);
      addIcons();
      yield this.loadSettings();
      this.app.workspace.onLayoutReady(() => {
        this.reloadStyles(this.settings);
        createHighlighterIcons(this.settings, this);
      });
      this.registerEvent(this.app.workspace.on("editor-menu", this.handleHighlighterInContextMenu));
      this.addSettingTab(new HighlightrSettingTab(this.app, this));
      this.addCommand({
        id: "highlighter-plugin-menu",
        name: "Open Highlightr",
        icon: "highlightr-pen",
        editorCallback: (editor) => {
          !document.querySelector(".menu.highlighterContainer")
            ? highlighterMenu(this.app, this.settings, editor)
            : true;
        },
      });
      addEventListener("Highlightr-NewCommand", () => {
        this.reloadStyles(this.settings);
        this.generateCommands(this.editor);
        createHighlighterIcons(this.settings, this);
      });
      this.generateCommands(this.editor);
      this.refresh();
    });
  }
  reloadStyles(settings) {
    let currentSheet = document.querySelector("style#highlightr-styles");
    if (currentSheet) {
      currentSheet.remove();
      createStyles(settings);
    } else {
      createStyles(settings);
    }
  }
  generateCommands(editor) {
    this.settings.highlighterOrder.forEach((highlighterKey) => {
      const applyCommand = (command, editor) => {
        const selectedText = editor.getSelection();
        const curserStart = editor.getCursor("from");
        const curserEnd = editor.getCursor("to");
        const prefix = command.prefix;
        const suffix = command.suffix || prefix;
        const setCursor = (mode) => {
          editor.setCursor(curserStart.line + command.line * mode, curserEnd.ch + cursorPos * mode);
        };
        const cursorPos = selectedText.length > 0 ? prefix.length + suffix.length + 1 : prefix.length;
        const preStart = {
          line: curserStart.line - command.line,
          ch: curserStart.ch - prefix.length,
        };
        const pre = editor.getRange(preStart, curserStart);
        const sufEnd = {
          line: curserStart.line + command.line,
          ch: curserEnd.ch + suffix.length,
        };
        const suf = editor.getRange(curserEnd, sufEnd);
        const preLast = pre.slice(-1);
        const prefixLast = prefix.trimStart().slice(-1);
        suf[0];
        if (suf === suffix.trimEnd()) {
          if (preLast === prefixLast && selectedText) {
            editor.replaceRange(selectedText, preStart, sufEnd);
            const changeCursor = (mode) => {
              editor.setCursor(curserStart.line + command.line * mode, curserEnd.ch + (cursorPos * mode + 8));
            };
            return changeCursor(-1);
          }
        }
        editor.replaceSelection(`${prefix}${selectedText}${suffix}`);
        return setCursor(1);
      };
      const commandsMap = {
        highlight: {
          char: 34,
          line: 0,
          prefix:
            this.settings.highlighterMethods === "css-classes"
              ? `<mark class="hltr-${highlighterKey.toLowerCase()}">`
              : `<mark style="background: transparent; color: ${this.settings.highlighters[highlighterKey]};">`,
          suffix: "</mark>",
        },
      };
      Object.keys(commandsMap).forEach((type) => {
        let highlighterpen = `highlightr-pen-${highlighterKey}`.toLowerCase();
        this.addCommand({
          id: highlighterKey,
          name: highlighterKey,
          icon: highlighterpen,
          editorCallback: (editor) =>
            __awaiter(this, void 0, void 0, function* () {
              applyCommand(commandsMap[type], editor);
              yield wait(10);
              editor.focus();
            }),
        });
      });
      this.addCommand({
        id: "unhighlight",
        name: "Remove highlight",
        icon: "highlightr-eraser",
        editorCallback: (editor) =>
          __awaiter(this, void 0, void 0, function* () {
            this.eraseHighlight(editor);
            editor.focus();
          }),
      });
    });
  }
  onunload() {
    console.log("Highlightr unloaded");
  }
  loadSettings() {
    return __awaiter(this, void 0, void 0, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.saveData(this.settings);
    });
  }
}

module.exports = HighlightrPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
