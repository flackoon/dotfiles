#!/usr/bin/env zsh

# Opens a file in editor
# The number alias comes from scmpuff
# Example: vo 1
vo() { eval "$(scmpuff expand -- "$EDITOR" "$@")" }

be() { bundle exec "$@" }

unalias "gd"
gd() { git diff $(scmpuff expand -- "$@") }
gds() { git diff --staged $(scmpuff expand -- "$@") }
gsh() { git show $(scmpuff expand -- "$@") }
gbc(){ git checkout -b "$@" }
gch() { git checkout "$@" }
unstage() { git reset -- "$@"; gst }
revert() { git checkout -- "$@"; gst }
fixup(){ git commit --fixup "$@" }

# fbr - checkout git branch (including remote branches)
gbl() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}


tma() { tmux attach-session -t "$1" }
tmk() { tmux kill-session -t "$1"; tml }

opr() {
  repo=`git config --get remote.origin.url | sed 's/\.git$//' | cut -d':' -f2-`
  against="$1"
  if [[ -z $against ]]; then
    against="master"
  fi
  open "https://www.github.com/$repo/compare/$against...$(git rev-parse --abbrev-ref HEAD)"
}

# Switch OS, iterm and vim color theme
theme() {
  current_theme="$(defaults read -g AppleInterfaceStyle 2>/dev/null || echo "light")"

  # Update iterm theme
  echo -e "\033]50;SetProfile=$1\a"

  if [ -f ~/.zsh/theme ]; then
    echo THEME="$1" > ~/.zsh/theme
  else
    touch ~/.zsh/theme && echo THEME="$1" > ~/.zsh/theme
  fi

  if [[ ${(L)current_theme} != "$1" ]]; then
    # Iterate over all sessions and for every pane running VIM switch the theme
    for session in "${(@f)$(tmux list-sessions -F '#{session_name}')}"; do
      for window in "${(@f)$(tmux list-windows -t "$session" -F $session:#{window_index})}"; do
        for panel in "${(@f)$(tmux list-panes -t $window -F $session:#{window_index}.#{pane_index})}"; do
          theme="${(C)1}"
          is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
              | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

          tmux if-shell -t "$panel" "$is_vim" "send-keys -t $panel escape ENTER"
          tmux if-shell -t "$panel" "$is_vim" "send-keys -t $panel ':$theme' ENTER"
        done
      done
    done

    # Switch OS theme
    if [[ "$1" == "dark" ]]; then
      osascript -l JavaScript -e "Application('System Events').appearancePreferences.darkMode = true" >/dev/null
    else
      osascript -l JavaScript -e "Application('System Events').appearancePreferences.darkMode = false" >/dev/null
    fi


    # Update VS Code config
    old_dir="$(pwd)"
    cd ~/Library/Application\ Support/Code/User >/dev/null
    if [[ "$1" == "dark" ]]; then
      sed -i '' 's/"workbench.colorTheme": "Everforest Light/\/\/ "workbench.colorTheme": "Everforest Light/' settings.json
      sed -i '' 's/\/\/ "workbench.colorTheme": "Everforest Dark/"workbench.colorTheme": "Everforest Dark/' settings.json
      sed -i '' 's/\/\/ "editor.background"/"editor.background"/' settings.json
      sed -i '' 's/\/\/ "sideBar.background"/"sideBar.background"/' settings.json
    else
      sed -i '' 's/\/\/ "workbench.colorTheme": "Everforest Light/"workbench.colorTheme": "Everforest Light/' settings.json
      sed -i '' 's/"workbench.colorTheme": "Everforest Dark/\/\/ "workbench.colorTheme": "Everforest Dark/' settings.json
      sed -i '' 's/"editor.background"/\/\/ "editor.background"/' settings.json
      sed -i '' 's/"sideBar.background"/\/\/ "sideBar.background"/' settings.json
    fi
    cd "$old_dir" >/dev/null
  fi
}

execute_in_iterm() {
osascript <<EOD
  tell application "iTerm2"
    tell current window
      tell current session
        write text "$1"
      end tell
    end tell
  end tell
EOD
}

toggleVsCodeLineCoverageHighlight() {
  settingsPath=~/Library/Application\ Support/Code/User/settings.json

  setting=$(ggrep -oP '(?<=coverage-gutters.showLineCoverage\":\s)(false|true)' $settingsPath)

  newSetting="false"

  if [ $setting = "false" ]
  then
    newSetting="true"
  elif [ $setting = "true" ]
  then
    newSetting="false"
  fi

  sed -i '' "s/coverage-gutters.showLineCoverage\": ${setting}/coverage-gutters.showLineCoverage\": ${newSetting}/" $settingsPath
}
